
11.RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006034  08006034  00016034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061e0  080061e0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e8  080061e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061ec  080061ec  000161ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080061f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049f0  20000074  08006264  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a64  08006264  00024a64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015912  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b74  00000000  00000000  000359b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00039388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003761  00000000  00000000  0003a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc6d  00000000  00000000  0003d859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090554  00000000  00000000  0004d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dda1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e84  00000000  00000000  000dda70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800601c 	.word	0x0800601c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800601c 	.word	0x0800601c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <my_printf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include <stdio.h>
#include <string.h>
void my_printf (char *format, ...){
 8000588:	b40f      	push	{r0, r1, r2, r3}
 800058a:	b580      	push	{r7, lr}
 800058c:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8000590:	af00      	add	r7, sp, #0
	va_list args;
	va_start (args, format);
 8000592:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 8000596:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
	char data_to_print[512] = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	3304      	adds	r3, #4
 80005a2:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f005 f90f 	bl	80057cc <memset>
	vsprintf(data_to_print, format, args);
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80005b4:	f8d7 1218 	ldr.w	r1, [r7, #536]	; 0x218
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 f925 	bl	8005808 <vsiprintf>
	int data_len = strlen(data_to_print);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff fe0d 	bl	80001e0 <strlen>
 80005c6:	4603      	mov	r3, r0
 80005c8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	for (int i = 0; i < data_len; i ++){
 80005cc:	2300      	movs	r3, #0
 80005ce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80005d2:	e00e      	b.n	80005f2 <my_printf+0x6a>
		HAL_UART_Transmit(&huart1, (uint8_t*)&data_to_print[i], 1, HAL_MAX_DELAY);
 80005d4:	1d3a      	adds	r2, r7, #4
 80005d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80005da:	18d1      	adds	r1, r2, r3
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	2201      	movs	r2, #1
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <my_printf+0x88>)
 80005e4:	f001 fa8b 	bl	8001afe <HAL_UART_Transmit>
	for (int i = 0; i < data_len; i ++){
 80005e8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80005ec:	3301      	adds	r3, #1
 80005ee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80005f2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80005f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80005fa:	429a      	cmp	r2, r3
 80005fc:	dbea      	blt.n	80005d4 <my_printf+0x4c>

	}
	va_end(args);
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8000606:	46bd      	mov	sp, r7
 8000608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr
 8000610:	200049c0 	.word	0x200049c0

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 facc 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f866 	bl	80006ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f8ec 	bl	80007fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000624:	f000 f8c0 	bl	80007a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000628:	f001 fd66 	bl	80020f8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Uart_lock */
  Uart_lockHandle = osMutexNew(&Uart_lock_attributes);
 800062c:	481c      	ldr	r0, [pc, #112]	; (80006a0 <main+0x8c>)
 800062e:	f001 fe5a 	bl	80022e6 <osMutexNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a1b      	ldr	r2, [pc, #108]	; (80006a4 <main+0x90>)
 8000636:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of sensor_queue_ */
  sensor_queue_Handle = osMessageQueueNew (16, sizeof(uint16_t), &sensor_queue__attributes);
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <main+0x94>)
 800063a:	2102      	movs	r1, #2
 800063c:	2010      	movs	r0, #16
 800063e:	f001 ff60 	bl	8002502 <osMessageQueueNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a19      	ldr	r2, [pc, #100]	; (80006ac <main+0x98>)
 8000646:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(task1_blink_red_led, NULL, &Task1_attributes);
 8000648:	4a19      	ldr	r2, [pc, #100]	; (80006b0 <main+0x9c>)
 800064a:	2100      	movs	r1, #0
 800064c:	4819      	ldr	r0, [pc, #100]	; (80006b4 <main+0xa0>)
 800064e:	f001 fd9d 	bl	800218c <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <main+0xa4>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(task2_blink_bue_led, NULL, &Task2_attributes);
 8000658:	4a18      	ldr	r2, [pc, #96]	; (80006bc <main+0xa8>)
 800065a:	2100      	movs	r1, #0
 800065c:	4818      	ldr	r0, [pc, #96]	; (80006c0 <main+0xac>)
 800065e:	f001 fd95 	bl	800218c <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a17      	ldr	r2, [pc, #92]	; (80006c4 <main+0xb0>)
 8000666:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(task3_send_hello, NULL, &Task3_attributes);
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <main+0xb4>)
 800066a:	2100      	movs	r1, #0
 800066c:	4817      	ldr	r0, [pc, #92]	; (80006cc <main+0xb8>)
 800066e:	f001 fd8d 	bl	800218c <osThreadNew>
 8000672:	4603      	mov	r3, r0
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <main+0xbc>)
 8000676:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(task4_send_xinchao, NULL, &Task4_attributes);
 8000678:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <main+0xc0>)
 800067a:	2100      	movs	r1, #0
 800067c:	4816      	ldr	r0, [pc, #88]	; (80006d8 <main+0xc4>)
 800067e:	f001 fd85 	bl	800218c <osThreadNew>
 8000682:	4603      	mov	r3, r0
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <main+0xc8>)
 8000686:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(task5_read_ss_data, NULL, &Task5_attributes);
 8000688:	4a15      	ldr	r2, [pc, #84]	; (80006e0 <main+0xcc>)
 800068a:	2100      	movs	r1, #0
 800068c:	4815      	ldr	r0, [pc, #84]	; (80006e4 <main+0xd0>)
 800068e:	f001 fd7d 	bl	800218c <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <main+0xd4>)
 8000696:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000698:	f001 fd52 	bl	8002140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x88>
 800069e:	bf00      	nop
 80006a0:	08006184 	.word	0x08006184
 80006a4:	200049b0 	.word	0x200049b0
 80006a8:	0800616c 	.word	0x0800616c
 80006ac:	20004a08 	.word	0x20004a08
 80006b0:	080060b8 	.word	0x080060b8
 80006b4:	08000885 	.word	0x08000885
 80006b8:	200049b8 	.word	0x200049b8
 80006bc:	080060dc 	.word	0x080060dc
 80006c0:	080008a5 	.word	0x080008a5
 80006c4:	20004a0c 	.word	0x20004a0c
 80006c8:	08006100 	.word	0x08006100
 80006cc:	080008c5 	.word	0x080008c5
 80006d0:	20004a04 	.word	0x20004a04
 80006d4:	08006124 	.word	0x08006124
 80006d8:	0800091d 	.word	0x0800091d
 80006dc:	200049bc 	.word	0x200049bc
 80006e0:	08006148 	.word	0x08006148
 80006e4:	08000961 	.word	0x08000961
 80006e8:	200049ac 	.word	0x200049ac

080006ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	; 0x50
 80006f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	2230      	movs	r2, #48	; 0x30
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 f866 	bl	80057cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 030c 	add.w	r3, r7, #12
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <SystemClock_Config+0xb4>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemClock_Config+0xb4>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	; 0x40
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <SystemClock_Config+0xb4>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <SystemClock_Config+0xb8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemClock_Config+0xb8>)
 8000736:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800073a:	6013      	str	r3, [r2, #0]
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <SystemClock_Config+0xb8>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	2301      	movs	r3, #1
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000750:	2310      	movs	r3, #16
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000754:	2300      	movs	r3, #0
 8000756:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	4618      	mov	r0, r3
 800075e:	f000 fd39 	bl	80011d4 <HAL_RCC_OscConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000768:	f000 f914 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
 800076e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f000 ff9c 	bl	80016c4 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000792:	f000 f8ff 	bl	8000994 <Error_Handler>
  }
}
 8000796:	bf00      	nop
 8000798:	3750      	adds	r7, #80	; 0x50
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <MX_USART1_UART_Init+0x50>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b2:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f001 f940 	bl	8001a64 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007ea:	f000 f8d3 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200049c0 	.word	0x200049c0
 80007f8:	40011000 	.word	0x40011000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_GPIO_Init+0x80>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <MX_GPIO_Init+0x80>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_GPIO_Init+0x80>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_GPIO_Init+0x80>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a11      	ldr	r2, [pc, #68]	; (800087c <MX_GPIO_Init+0x80>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_GPIO_Init+0x80>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <MX_GPIO_Init+0x84>)
 8000852:	f000 fc8b 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000856:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800085a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_GPIO_Init+0x84>)
 8000870:	f000 faf8 	bl	8000e64 <HAL_GPIO_Init>

}
 8000874:	bf00      	nop
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40023800 	.word	0x40023800
 8000880:	40020c00 	.word	0x40020c00

08000884 <task1_blink_red_led>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task1_blink_red_led */
void task1_blink_red_led(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800088c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000890:	4803      	ldr	r0, [pc, #12]	; (80008a0 <task1_blink_red_led+0x1c>)
 8000892:	f000 fc84 	bl	800119e <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f001 fd09 	bl	80022b0 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800089e:	e7f5      	b.n	800088c <task1_blink_red_led+0x8>
 80008a0:	40020c00 	.word	0x40020c00

080008a4 <task2_blink_bue_led>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task2_blink_bue_led */
void task2_blink_bue_led(void *argument)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task2_blink_bue_led */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <task2_blink_bue_led+0x1c>)
 80008b2:	f000 fc74 	bl	800119e <HAL_GPIO_TogglePin>
    osDelay(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ba:	f001 fcf9 	bl	80022b0 <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008be:	e7f5      	b.n	80008ac <task2_blink_bue_led+0x8>
 80008c0:	40020c00 	.word	0x40020c00

080008c4 <task3_send_hello>:
* @retval None
*/
/* USER CODE END Header_task3_send_hello */
int global_var;
void task3_send_hello(void *argument)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task3_send_hello */
  /* Infinite loop */
  //int cnt = 0;
  int temp = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  //temp = global_var;
	  osMessageQueueGet(sensor_queue_Handle, &temp, 0, HAL_MAX_DELAY);
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <task3_send_hello+0x4c>)
 80008d2:	6818      	ldr	r0, [r3, #0]
 80008d4:	f107 010c 	add.w	r1, r7, #12
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	2200      	movs	r2, #0
 80008de:	f001 fee3 	bl	80026a8 <osMessageQueueGet>
	  // Hàm dành Mutexes
	  osMutexAcquire(Uart_lockHandle, HAL_MAX_DELAY);
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <task3_send_hello+0x50>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f04f 31ff 	mov.w	r1, #4294967295
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fd81 	bl	80023f2 <osMutexAcquire>
	  //my_printf("Hello PC [%3d] \n", cnt++);
	  my_printf("Hello PC [%3d] \n", temp);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4808      	ldr	r0, [pc, #32]	; (8000918 <task3_send_hello+0x54>)
 80008f6:	f7ff fe47 	bl	8000588 <my_printf>
	  // Dùng xong thì release
	  osMutexRelease(Uart_lockHandle);
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <task3_send_hello+0x50>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fdc2 	bl	8002488 <osMutexRelease>
	  osDelay(1000);
 8000904:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000908:	f001 fcd2 	bl	80022b0 <osDelay>
	  osMessageQueueGet(sensor_queue_Handle, &temp, 0, HAL_MAX_DELAY);
 800090c:	e7e0      	b.n	80008d0 <task3_send_hello+0xc>
 800090e:	bf00      	nop
 8000910:	20004a08 	.word	0x20004a08
 8000914:	200049b0 	.word	0x200049b0
 8000918:	08006078 	.word	0x08006078

0800091c <task4_send_xinchao>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task4_send_xinchao */
void task4_send_xinchao(void *argument)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task4_send_xinchao */
	/* Infinite loop */
	int cnt = 0 ;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
	  osMutexAcquire(Uart_lockHandle, HAL_MAX_DELAY);
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <task4_send_xinchao+0x3c>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fd5e 	bl	80023f2 <osMutexAcquire>
	  my_printf("Xin chao PC [%3d] \n", cnt++);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	60fa      	str	r2, [r7, #12]
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <task4_send_xinchao+0x40>)
 8000940:	f7ff fe22 	bl	8000588 <my_printf>
	  osMutexRelease(Uart_lockHandle);
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <task4_send_xinchao+0x3c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fd9d 	bl	8002488 <osMutexRelease>
	  osDelay(1000);
 800094e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000952:	f001 fcad 	bl	80022b0 <osDelay>
	  osMutexAcquire(Uart_lockHandle, HAL_MAX_DELAY);
 8000956:	e7e7      	b.n	8000928 <task4_send_xinchao+0xc>
 8000958:	200049b0 	.word	0x200049b0
 800095c:	0800608c 	.word	0x0800608c

08000960 <task5_read_ss_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task5_read_ss_data */
void task5_read_ss_data(void *argument)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task5_read_ss_data */
  /* Infinite loop */
	int ss_data = 0 ;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	 ss_data ++;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	3301      	adds	r3, #1
 8000970:	60fb      	str	r3, [r7, #12]
	 //global_var = ss_data;
	 osMessageQueuePut(sensor_queue_Handle, &ss_data, 0, HAL_MAX_DELAY);
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <task5_read_ss_data+0x30>)
 8000974:	6818      	ldr	r0, [r3, #0]
 8000976:	f107 010c 	add.w	r1, r7, #12
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	2200      	movs	r2, #0
 8000980:	f001 fe32 	bl	80025e8 <osMessageQueuePut>
    osDelay(500);
 8000984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000988:	f001 fc92 	bl	80022b0 <osDelay>
	 ss_data ++;
 800098c:	e7ee      	b.n	800096c <task5_read_ss_data+0xc>
 800098e:	bf00      	nop
 8000990:	20004a08 	.word	0x20004a08

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_MspInit+0x54>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_MspInit+0x54>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fa14 	bl	8000e12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_UART_MspInit+0x84>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d12b      	bne.n	8000a72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <HAL_UART_MspInit+0x88>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a22:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <HAL_UART_MspInit+0x88>)
 8000a24:	f043 0310 	orr.w	r3, r3, #16
 8000a28:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_UART_MspInit+0x88>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <HAL_UART_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <HAL_UART_MspInit+0x88>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_UART_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a52:	23c0      	movs	r3, #192	; 0xc0
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <HAL_UART_MspInit+0x8c>)
 8000a6e:	f000 f9f9 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40011000 	.word	0x40011000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020400 	.word	0x40020400

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab8:	f000 f8ce 	bl	8000c58 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000abc:	f003 fce8 	bl	8004490 <xTaskGetSchedulerState>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d001      	beq.n	8000aca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ac6:	f004 fbcf 	bl	8005268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ad8:	4a14      	ldr	r2, [pc, #80]	; (8000b2c <_sbrk+0x5c>)
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <_sbrk+0x60>)
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ae4:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <_sbrk+0x64>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aec:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <_sbrk+0x64>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <_sbrk+0x68>)
 8000af0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d207      	bcs.n	8000b10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b00:	f004 fe2c 	bl	800575c <__errno>
 8000b04:	4603      	mov	r3, r0
 8000b06:	220c      	movs	r2, #12
 8000b08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	e009      	b.n	8000b24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <_sbrk+0x64>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <_sbrk+0x64>)
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <_sbrk+0x64>)
 8000b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b22:	68fb      	ldr	r3, [r7, #12]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20020000 	.word	0x20020000
 8000b30:	00000400 	.word	0x00000400
 8000b34:	20000090 	.word	0x20000090
 8000b38:	20004a68 	.word	0x20004a68

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f004 fdeb 	bl	8005768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fd3f 	bl	8000614 <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ba4:	080061f0 	.word	0x080061f0
  ldr r2, =_sbss
 8000ba8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bac:	20004a64 	.word	0x20004a64

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f90d 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff feda 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f917 	bl	8000e4a <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f8ed 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20004a10 	.word	0x20004a10

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20004a10 	.word	0x20004a10

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	e159      	b.n	8001134 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	f040 8148 	bne.w	800112e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0303 	and.w	r3, r3, #3
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d005      	beq.n	8000eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 0303 	and.w	r3, r3, #3
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d017      	beq.n	8000f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	2203      	movs	r2, #3
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	08da      	lsrs	r2, r3, #3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3208      	adds	r2, #8
 8000f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	220f      	movs	r2, #15
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	691a      	ldr	r2, [r3, #16]
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	08da      	lsrs	r2, r3, #3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	69b9      	ldr	r1, [r7, #24]
 8000fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0203 	and.w	r2, r3, #3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80a2 	beq.w	800112e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b57      	ldr	r3, [pc, #348]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	4a56      	ldr	r2, [pc, #344]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffa:	4b54      	ldr	r3, [pc, #336]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001006:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x2ec>)
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	089b      	lsrs	r3, r3, #2
 800100c:	3302      	adds	r3, #2
 800100e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	220f      	movs	r2, #15
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a49      	ldr	r2, [pc, #292]	; (8001154 <HAL_GPIO_Init+0x2f0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d019      	beq.n	8001066 <HAL_GPIO_Init+0x202>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_GPIO_Init+0x2f4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0x1fe>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <HAL_GPIO_Init+0x2f8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d00d      	beq.n	800105e <HAL_GPIO_Init+0x1fa>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a46      	ldr	r2, [pc, #280]	; (8001160 <HAL_GPIO_Init+0x2fc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x1f6>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a45      	ldr	r2, [pc, #276]	; (8001164 <HAL_GPIO_Init+0x300>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d101      	bne.n	8001056 <HAL_GPIO_Init+0x1f2>
 8001052:	2304      	movs	r3, #4
 8001054:	e008      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001056:	2307      	movs	r3, #7
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x204>
 800105a:	2303      	movs	r3, #3
 800105c:	e004      	b.n	8001068 <HAL_GPIO_Init+0x204>
 800105e:	2302      	movs	r3, #2
 8001060:	e002      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <HAL_GPIO_Init+0x204>
 8001066:	2300      	movs	r3, #0
 8001068:	69fa      	ldr	r2, [r7, #28]
 800106a:	f002 0203 	and.w	r2, r2, #3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4093      	lsls	r3, r2
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001078:	4935      	ldr	r1, [pc, #212]	; (8001150 <HAL_GPIO_Init+0x2ec>)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001086:	4b38      	ldr	r3, [pc, #224]	; (8001168 <HAL_GPIO_Init+0x304>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010aa:	4a2f      	ldr	r2, [pc, #188]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d4:	4a24      	ldr	r2, [pc, #144]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010da:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_GPIO_Init+0x304>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4013      	ands	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fe:	4a1a      	ldr	r2, [pc, #104]	; (8001168 <HAL_GPIO_Init+0x304>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_GPIO_Init+0x304>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001128:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <HAL_GPIO_Init+0x304>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3301      	adds	r3, #1
 8001132:	61fb      	str	r3, [r7, #28]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	f67f aea2 	bls.w	8000e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40013800 	.word	0x40013800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020400 	.word	0x40020400
 800115c:	40020800 	.word	0x40020800
 8001160:	40020c00 	.word	0x40020c00
 8001164:	40021000 	.word	0x40021000
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	400b      	ands	r3, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e264      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d075      	beq.n	80012de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f2:	4ba3      	ldr	r3, [pc, #652]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f003 030c 	and.w	r3, r3, #12
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d00c      	beq.n	8001218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fe:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001206:	2b08      	cmp	r3, #8
 8001208:	d112      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800120a:	4b9d      	ldr	r3, [pc, #628]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001216:	d10b      	bne.n	8001230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	4b99      	ldr	r3, [pc, #612]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d05b      	beq.n	80012dc <HAL_RCC_OscConfig+0x108>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d157      	bne.n	80012dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e23f      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001238:	d106      	bne.n	8001248 <HAL_RCC_OscConfig+0x74>
 800123a:	4b91      	ldr	r3, [pc, #580]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a90      	ldr	r2, [pc, #576]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x98>
 8001252:	4b8b      	ldr	r3, [pc, #556]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a8a      	ldr	r2, [pc, #552]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a87      	ldr	r2, [pc, #540]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xb0>
 800126c:	4b84      	ldr	r3, [pc, #528]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a83      	ldr	r2, [pc, #524]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a80      	ldr	r2, [pc, #512]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fcf8 	bl	8000c80 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fcf4 	bl	8000c80 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e204      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b76      	ldr	r3, [pc, #472]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xc0>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fce4 	bl	8000c80 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fce0 	bl	8000c80 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1f0      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b6c      	ldr	r3, [pc, #432]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0xe8>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ea:	4b65      	ldr	r3, [pc, #404]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1c4      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b56      	ldr	r3, [pc, #344]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4952      	ldr	r1, [pc, #328]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <HAL_RCC_OscConfig+0x2b0>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fc99 	bl	8000c80 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fc95 	bl	8000c80 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1a5      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b46      	ldr	r3, [pc, #280]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4940      	ldr	r1, [pc, #256]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <HAL_RCC_OscConfig+0x2b0>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc78 	bl	8000c80 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fc74 	bl	8000c80 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e184      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b36      	ldr	r3, [pc, #216]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d030      	beq.n	8001420 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d016      	beq.n	80013f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_RCC_OscConfig+0x2b4>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013cc:	f7ff fc58 	bl	8000c80 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc54 	bl	8000c80 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e164      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x200>
 80013f2:	e015      	b.n	8001420 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x2b4>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fa:	f7ff fc41 	bl	8000c80 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001402:	f7ff fc3d 	bl	8000c80 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e14d      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 80a0 	beq.w	800156e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10f      	bne.n	800145e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145a:	2301      	movs	r3, #1
 800145c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x2b8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d121      	bne.n	80014ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_RCC_OscConfig+0x2b8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_RCC_OscConfig+0x2b8>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001476:	f7ff fc03 	bl	8000c80 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147c:	e011      	b.n	80014a2 <HAL_RCC_OscConfig+0x2ce>
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
 8001488:	42470e80 	.word	0x42470e80
 800148c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001490:	f7ff fbf6 	bl	8000c80 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e106      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a2:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <HAL_RCC_OscConfig+0x4e4>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2f0>
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a80      	ldr	r2, [pc, #512]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e01c      	b.n	80014fe <HAL_RCC_OscConfig+0x32a>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b05      	cmp	r3, #5
 80014ca:	d10c      	bne.n	80014e6 <HAL_RCC_OscConfig+0x312>
 80014cc:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a7a      	ldr	r2, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	4b78      	ldr	r3, [pc, #480]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a77      	ldr	r2, [pc, #476]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e00b      	b.n	80014fe <HAL_RCC_OscConfig+0x32a>
 80014e6:	4b75      	ldr	r3, [pc, #468]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ea:	4a74      	ldr	r2, [pc, #464]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6713      	str	r3, [r2, #112]	; 0x70
 80014f2:	4b72      	ldr	r3, [pc, #456]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f6:	4a71      	ldr	r2, [pc, #452]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fbbb 	bl	8000c80 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fbb7 	bl	8000c80 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e0c5      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001524:	4b65      	ldr	r3, [pc, #404]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 8001526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0ee      	beq.n	800150e <HAL_RCC_OscConfig+0x33a>
 8001530:	e014      	b.n	800155c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fba5 	bl	8000c80 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fba1 	bl	8000c80 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0af      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001550:	4b5a      	ldr	r3, [pc, #360]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ee      	bne.n	800153a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800155c:	7dfb      	ldrb	r3, [r7, #23]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d105      	bne.n	800156e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001562:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a55      	ldr	r2, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 8001568:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	699b      	ldr	r3, [r3, #24]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 809b 	beq.w	80016ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001578:	4b50      	ldr	r3, [pc, #320]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 030c 	and.w	r3, r3, #12
 8001580:	2b08      	cmp	r3, #8
 8001582:	d05c      	beq.n	800163e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d141      	bne.n	8001610 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158c:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_RCC_OscConfig+0x4ec>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001592:	f7ff fb75 	bl	8000c80 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fb71 	bl	8000c80 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e081      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ac:	4b43      	ldr	r3, [pc, #268]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69da      	ldr	r2, [r3, #28]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	019b      	lsls	r3, r3, #6
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	3b01      	subs	r3, #1
 80015d2:	041b      	lsls	r3, r3, #16
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	061b      	lsls	r3, r3, #24
 80015dc:	4937      	ldr	r1, [pc, #220]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015e2:	4b37      	ldr	r3, [pc, #220]	; (80016c0 <HAL_RCC_OscConfig+0x4ec>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fb4a 	bl	8000c80 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f0:	f7ff fb46 	bl	8000c80 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e056      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x41c>
 800160e:	e04e      	b.n	80016ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x4ec>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb33 	bl	8000c80 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb2f 	bl	8000c80 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e03f      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x44a>
 800163c:	e037      	b.n	80016ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e032      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <HAL_RCC_OscConfig+0x4e8>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d028      	beq.n	80016aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d121      	bne.n	80016aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d11a      	bne.n	80016aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800167a:	4013      	ands	r3, r2
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001680:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001682:	4293      	cmp	r3, r2
 8001684:	d111      	bne.n	80016aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	3b01      	subs	r3, #1
 8001694:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001696:	429a      	cmp	r2, r3
 8001698:	d107      	bne.n	80016aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d001      	beq.n	80016ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e000      	b.n	80016b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40007000 	.word	0x40007000
 80016bc:	40023800 	.word	0x40023800
 80016c0:	42470060 	.word	0x42470060

080016c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0cc      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b68      	ldr	r3, [pc, #416]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d90c      	bls.n	8001700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b65      	ldr	r3, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d044      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d119      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d003      	beq.n	8001782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177e:	2b03      	cmp	r3, #3
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e067      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4934      	ldr	r1, [pc, #208]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b4:	f7ff fa64 	bl	8000c80 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff fa60 	bl	8000c80 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e04f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2b      	ldr	r3, [pc, #172]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d20c      	bcs.n	800180c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	b2d2      	uxtb	r2, r2
 80017f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4602      	mov	r2, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	5ccb      	ldrb	r3, [r1, r3]
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1c8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f9c4 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08006194 	.word	0x08006194
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001896:	2100      	movs	r1, #0
 8001898:	6079      	str	r1, [r7, #4]
 800189a:	2100      	movs	r1, #0
 800189c:	60f9      	str	r1, [r7, #12]
 800189e:	2100      	movs	r1, #0
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018a2:	2100      	movs	r1, #0
 80018a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a6:	4952      	ldr	r1, [pc, #328]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a8:	6889      	ldr	r1, [r1, #8]
 80018aa:	f001 010c 	and.w	r1, r1, #12
 80018ae:	2908      	cmp	r1, #8
 80018b0:	d00d      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x3e>
 80018b2:	2908      	cmp	r1, #8
 80018b4:	f200 8094 	bhi.w	80019e0 <HAL_RCC_GetSysClockFreq+0x150>
 80018b8:	2900      	cmp	r1, #0
 80018ba:	d002      	beq.n	80018c2 <HAL_RCC_GetSysClockFreq+0x32>
 80018bc:	2904      	cmp	r1, #4
 80018be:	d003      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x38>
 80018c0:	e08e      	b.n	80019e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c2:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80018c4:	60bb      	str	r3, [r7, #8]
       break;
 80018c6:	e08e      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80018ca:	60bb      	str	r3, [r7, #8]
      break;
 80018cc:	e08b      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018ce:	4948      	ldr	r1, [pc, #288]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018d0:	6849      	ldr	r1, [r1, #4]
 80018d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80018d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d8:	4945      	ldr	r1, [pc, #276]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018da:	6849      	ldr	r1, [r1, #4]
 80018dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018e0:	2900      	cmp	r1, #0
 80018e2:	d024      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e4:	4942      	ldr	r1, [pc, #264]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018e6:	6849      	ldr	r1, [r1, #4]
 80018e8:	0989      	lsrs	r1, r1, #6
 80018ea:	4608      	mov	r0, r1
 80018ec:	f04f 0100 	mov.w	r1, #0
 80018f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018f4:	f04f 0500 	mov.w	r5, #0
 80018f8:	ea00 0204 	and.w	r2, r0, r4
 80018fc:	ea01 0305 	and.w	r3, r1, r5
 8001900:	493d      	ldr	r1, [pc, #244]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001902:	fb01 f003 	mul.w	r0, r1, r3
 8001906:	2100      	movs	r1, #0
 8001908:	fb01 f102 	mul.w	r1, r1, r2
 800190c:	1844      	adds	r4, r0, r1
 800190e:	493a      	ldr	r1, [pc, #232]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8001910:	fba2 0101 	umull	r0, r1, r2, r1
 8001914:	1863      	adds	r3, r4, r1
 8001916:	4619      	mov	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	f7fe fcb6 	bl	8000290 <__aeabi_uldivmod>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4613      	mov	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e04a      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	099b      	lsrs	r3, r3, #6
 8001934:	461a      	mov	r2, r3
 8001936:	f04f 0300 	mov.w	r3, #0
 800193a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800193e:	f04f 0100 	mov.w	r1, #0
 8001942:	ea02 0400 	and.w	r4, r2, r0
 8001946:	ea03 0501 	and.w	r5, r3, r1
 800194a:	4620      	mov	r0, r4
 800194c:	4629      	mov	r1, r5
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	014b      	lsls	r3, r1, #5
 8001958:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800195c:	0142      	lsls	r2, r0, #5
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	1b00      	subs	r0, r0, r4
 8001964:	eb61 0105 	sbc.w	r1, r1, r5
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	018b      	lsls	r3, r1, #6
 8001972:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001976:	0182      	lsls	r2, r0, #6
 8001978:	1a12      	subs	r2, r2, r0
 800197a:	eb63 0301 	sbc.w	r3, r3, r1
 800197e:	f04f 0000 	mov.w	r0, #0
 8001982:	f04f 0100 	mov.w	r1, #0
 8001986:	00d9      	lsls	r1, r3, #3
 8001988:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800198c:	00d0      	lsls	r0, r2, #3
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	1912      	adds	r2, r2, r4
 8001994:	eb45 0303 	adc.w	r3, r5, r3
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	0299      	lsls	r1, r3, #10
 80019a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019a6:	0290      	lsls	r0, r2, #10
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	461a      	mov	r2, r3
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f7fe fc6a 	bl	8000290 <__aeabi_uldivmod>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4613      	mov	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0c1b      	lsrs	r3, r3, #16
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019dc:	60bb      	str	r3, [r7, #8]
      break;
 80019de:	e002      	b.n	80019e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e0:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80019e2:	60bb      	str	r3, [r7, #8]
      break;
 80019e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e6:	68bb      	ldr	r3, [r7, #8]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bdb0      	pop	{r4, r5, r7, pc}
 80019f0:	40023800 	.word	0x40023800
 80019f4:	00f42400 	.word	0x00f42400
 80019f8:	017d7840 	.word	0x017d7840

080019fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a02:	681b      	ldr	r3, [r3, #0]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff0 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0a9b      	lsrs	r3, r3, #10
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	080061a4 	.word	0x080061a4

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffdc 	bl	80019fc <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	0b5b      	lsrs	r3, r3, #13
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	080061a4 	.word	0x080061a4

08001a64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e03f      	b.n	8001af6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe ffb4 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001aa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f929 	bl	8001d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001abc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695a      	ldr	r2, [r3, #20]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001acc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001adc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2220      	movs	r2, #32
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b08a      	sub	sp, #40	; 0x28
 8001b02:	af02      	add	r7, sp, #8
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d17c      	bne.n	8001c18 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <HAL_UART_Transmit+0x2c>
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e075      	b.n	8001c1a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d101      	bne.n	8001b3c <HAL_UART_Transmit+0x3e>
 8001b38:	2302      	movs	r3, #2
 8001b3a:	e06e      	b.n	8001c1a <HAL_UART_Transmit+0x11c>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2221      	movs	r2, #33	; 0x21
 8001b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b52:	f7ff f895 	bl	8000c80 <HAL_GetTick>
 8001b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6c:	d108      	bne.n	8001b80 <HAL_UART_Transmit+0x82>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d104      	bne.n	8001b80 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	e003      	b.n	8001b88 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001b90:	e02a      	b.n	8001be8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f840 	bl	8001c22 <UART_WaitOnFlagUntilTimeout>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e036      	b.n	8001c1a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10b      	bne.n	8001bca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	e007      	b.n	8001bda <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	781a      	ldrb	r2, [r3, #0]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1cf      	bne.n	8001b92 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2140      	movs	r1, #64	; 0x40
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f000 f810 	bl	8001c22 <UART_WaitOnFlagUntilTimeout>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e006      	b.n	8001c1a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e000      	b.n	8001c1a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c18:	2302      	movs	r3, #2
  }
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3720      	adds	r7, #32
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b090      	sub	sp, #64	; 0x40
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	603b      	str	r3, [r7, #0]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c32:	e050      	b.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d04c      	beq.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c42:	f7ff f81d 	bl	8000c80 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d241      	bcs.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	330c      	adds	r3, #12
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c5c:	e853 3f00 	ldrex	r3, [r3]
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	330c      	adds	r3, #12
 8001c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c72:	637a      	str	r2, [r7, #52]	; 0x34
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c7a:	e841 2300 	strex	r3, r2, [r1]
 8001c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e5      	bne.n	8001c52 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3314      	adds	r3, #20
 8001c8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	e853 3f00 	ldrex	r3, [r3]
 8001c94:	613b      	str	r3, [r7, #16]
   return(result);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3314      	adds	r3, #20
 8001ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ca6:	623a      	str	r2, [r7, #32]
 8001ca8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001caa:	69f9      	ldr	r1, [r7, #28]
 8001cac:	6a3a      	ldr	r2, [r7, #32]
 8001cae:	e841 2300 	strex	r3, r2, [r1]
 8001cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e5      	bne.n	8001c86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e00f      	b.n	8001cf6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	79fb      	ldrb	r3, [r7, #7]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d09f      	beq.n	8001c34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3740      	adds	r7, #64	; 0x40
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d04:	b09f      	sub	sp, #124	; 0x7c
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d16:	68d9      	ldr	r1, [r3, #12]
 8001d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	ea40 0301 	orr.w	r3, r0, r1
 8001d20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	431a      	orrs	r2, r3
 8001d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d44:	f021 010c 	bic.w	r1, r1, #12
 8001d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	430b      	orrs	r3, r1
 8001d50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d5e:	6999      	ldr	r1, [r3, #24]
 8001d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	ea40 0301 	orr.w	r3, r0, r1
 8001d68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4bc5      	ldr	r3, [pc, #788]	; (8002084 <UART_SetConfig+0x384>)
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d004      	beq.n	8001d7e <UART_SetConfig+0x7e>
 8001d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	4bc3      	ldr	r3, [pc, #780]	; (8002088 <UART_SetConfig+0x388>)
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d103      	bne.n	8001d86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d7e:	f7ff fe5d 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001d82:	6778      	str	r0, [r7, #116]	; 0x74
 8001d84:	e002      	b.n	8001d8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d86:	f7ff fe45 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8001d8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d94:	f040 80b6 	bne.w	8001f04 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	f04f 0500 	mov.w	r5, #0
 8001da0:	4622      	mov	r2, r4
 8001da2:	462b      	mov	r3, r5
 8001da4:	1891      	adds	r1, r2, r2
 8001da6:	6439      	str	r1, [r7, #64]	; 0x40
 8001da8:	415b      	adcs	r3, r3
 8001daa:	647b      	str	r3, [r7, #68]	; 0x44
 8001dac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001db0:	1912      	adds	r2, r2, r4
 8001db2:	eb45 0303 	adc.w	r3, r5, r3
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	00d9      	lsls	r1, r3, #3
 8001dc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dc4:	00d0      	lsls	r0, r2, #3
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	1911      	adds	r1, r2, r4
 8001dcc:	6639      	str	r1, [r7, #96]	; 0x60
 8001dce:	416b      	adcs	r3, r5
 8001dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8001dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	1891      	adds	r1, r2, r2
 8001dde:	63b9      	str	r1, [r7, #56]	; 0x38
 8001de0:	415b      	adcs	r3, r3
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001de8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001dec:	f7fe fa50 	bl	8000290 <__aeabi_uldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4ba5      	ldr	r3, [pc, #660]	; (800208c <UART_SetConfig+0x38c>)
 8001df6:	fba3 2302 	umull	r2, r3, r3, r2
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	011e      	lsls	r6, r3, #4
 8001dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e00:	461c      	mov	r4, r3
 8001e02:	f04f 0500 	mov.w	r5, #0
 8001e06:	4622      	mov	r2, r4
 8001e08:	462b      	mov	r3, r5
 8001e0a:	1891      	adds	r1, r2, r2
 8001e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8001e0e:	415b      	adcs	r3, r3
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
 8001e12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e16:	1912      	adds	r2, r2, r4
 8001e18:	eb45 0303 	adc.w	r3, r5, r3
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	00d9      	lsls	r1, r3, #3
 8001e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e2a:	00d0      	lsls	r0, r2, #3
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	1911      	adds	r1, r2, r4
 8001e32:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e34:	416b      	adcs	r3, r5
 8001e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	1891      	adds	r1, r2, r2
 8001e44:	62b9      	str	r1, [r7, #40]	; 0x28
 8001e46:	415b      	adcs	r3, r3
 8001e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e52:	f7fe fa1d 	bl	8000290 <__aeabi_uldivmod>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4b8c      	ldr	r3, [pc, #560]	; (800208c <UART_SetConfig+0x38c>)
 8001e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	2164      	movs	r1, #100	; 0x64
 8001e64:	fb01 f303 	mul.w	r3, r1, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	3332      	adds	r3, #50	; 0x32
 8001e6e:	4a87      	ldr	r2, [pc, #540]	; (800208c <UART_SetConfig+0x38c>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001e7c:	441e      	add	r6, r3
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	4618      	mov	r0, r3
 8001e82:	f04f 0100 	mov.w	r1, #0
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	1894      	adds	r4, r2, r2
 8001e8c:	623c      	str	r4, [r7, #32]
 8001e8e:	415b      	adcs	r3, r3
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
 8001e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e96:	1812      	adds	r2, r2, r0
 8001e98:	eb41 0303 	adc.w	r3, r1, r3
 8001e9c:	f04f 0400 	mov.w	r4, #0
 8001ea0:	f04f 0500 	mov.w	r5, #0
 8001ea4:	00dd      	lsls	r5, r3, #3
 8001ea6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001eaa:	00d4      	lsls	r4, r2, #3
 8001eac:	4622      	mov	r2, r4
 8001eae:	462b      	mov	r3, r5
 8001eb0:	1814      	adds	r4, r2, r0
 8001eb2:	653c      	str	r4, [r7, #80]	; 0x50
 8001eb4:	414b      	adcs	r3, r1
 8001eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8001eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	1891      	adds	r1, r2, r2
 8001ec4:	61b9      	str	r1, [r7, #24]
 8001ec6:	415b      	adcs	r3, r3
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ece:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001ed2:	f7fe f9dd 	bl	8000290 <__aeabi_uldivmod>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4b6c      	ldr	r3, [pc, #432]	; (800208c <UART_SetConfig+0x38c>)
 8001edc:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee0:	095b      	lsrs	r3, r3, #5
 8001ee2:	2164      	movs	r1, #100	; 0x64
 8001ee4:	fb01 f303 	mul.w	r3, r1, r3
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	3332      	adds	r3, #50	; 0x32
 8001eee:	4a67      	ldr	r2, [pc, #412]	; (800208c <UART_SetConfig+0x38c>)
 8001ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef4:	095b      	lsrs	r3, r3, #5
 8001ef6:	f003 0207 	and.w	r2, r3, #7
 8001efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4432      	add	r2, r6
 8001f00:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f02:	e0b9      	b.n	8002078 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f06:	461c      	mov	r4, r3
 8001f08:	f04f 0500 	mov.w	r5, #0
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	462b      	mov	r3, r5
 8001f10:	1891      	adds	r1, r2, r2
 8001f12:	6139      	str	r1, [r7, #16]
 8001f14:	415b      	adcs	r3, r3
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	1912      	adds	r2, r2, r4
 8001f1e:	eb45 0303 	adc.w	r3, r5, r3
 8001f22:	f04f 0000 	mov.w	r0, #0
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	00d9      	lsls	r1, r3, #3
 8001f2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f30:	00d0      	lsls	r0, r2, #3
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	eb12 0804 	adds.w	r8, r2, r4
 8001f3a:	eb43 0905 	adc.w	r9, r3, r5
 8001f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	008b      	lsls	r3, r1, #2
 8001f52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f56:	0082      	lsls	r2, r0, #2
 8001f58:	4640      	mov	r0, r8
 8001f5a:	4649      	mov	r1, r9
 8001f5c:	f7fe f998 	bl	8000290 <__aeabi_uldivmod>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4b49      	ldr	r3, [pc, #292]	; (800208c <UART_SetConfig+0x38c>)
 8001f66:	fba3 2302 	umull	r2, r3, r3, r2
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	011e      	lsls	r6, r3, #4
 8001f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f70:	4618      	mov	r0, r3
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	1894      	adds	r4, r2, r2
 8001f7c:	60bc      	str	r4, [r7, #8]
 8001f7e:	415b      	adcs	r3, r3
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f86:	1812      	adds	r2, r2, r0
 8001f88:	eb41 0303 	adc.w	r3, r1, r3
 8001f8c:	f04f 0400 	mov.w	r4, #0
 8001f90:	f04f 0500 	mov.w	r5, #0
 8001f94:	00dd      	lsls	r5, r3, #3
 8001f96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f9a:	00d4      	lsls	r4, r2, #3
 8001f9c:	4622      	mov	r2, r4
 8001f9e:	462b      	mov	r3, r5
 8001fa0:	1814      	adds	r4, r2, r0
 8001fa2:	64bc      	str	r4, [r7, #72]	; 0x48
 8001fa4:	414b      	adcs	r3, r1
 8001fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f04f 0100 	mov.w	r1, #0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	008b      	lsls	r3, r1, #2
 8001fbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001fc0:	0082      	lsls	r2, r0, #2
 8001fc2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fc6:	f7fe f963 	bl	8000290 <__aeabi_uldivmod>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <UART_SetConfig+0x38c>)
 8001fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	2164      	movs	r1, #100	; 0x64
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	3332      	adds	r3, #50	; 0x32
 8001fe2:	4a2a      	ldr	r2, [pc, #168]	; (800208c <UART_SetConfig+0x38c>)
 8001fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe8:	095b      	lsrs	r3, r3, #5
 8001fea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fee:	441e      	add	r6, r3
 8001ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f04f 0100 	mov.w	r1, #0
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	1894      	adds	r4, r2, r2
 8001ffe:	603c      	str	r4, [r7, #0]
 8002000:	415b      	adcs	r3, r3
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002008:	1812      	adds	r2, r2, r0
 800200a:	eb41 0303 	adc.w	r3, r1, r3
 800200e:	f04f 0400 	mov.w	r4, #0
 8002012:	f04f 0500 	mov.w	r5, #0
 8002016:	00dd      	lsls	r5, r3, #3
 8002018:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800201c:	00d4      	lsls	r4, r2, #3
 800201e:	4622      	mov	r2, r4
 8002020:	462b      	mov	r3, r5
 8002022:	eb12 0a00 	adds.w	sl, r2, r0
 8002026:	eb43 0b01 	adc.w	fp, r3, r1
 800202a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4618      	mov	r0, r3
 8002030:	f04f 0100 	mov.w	r1, #0
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	008b      	lsls	r3, r1, #2
 800203e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002042:	0082      	lsls	r2, r0, #2
 8002044:	4650      	mov	r0, sl
 8002046:	4659      	mov	r1, fp
 8002048:	f7fe f922 	bl	8000290 <__aeabi_uldivmod>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <UART_SetConfig+0x38c>)
 8002052:	fba3 1302 	umull	r1, r3, r3, r2
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2164      	movs	r1, #100	; 0x64
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	3332      	adds	r3, #50	; 0x32
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <UART_SetConfig+0x38c>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4432      	add	r2, r6
 8002076:	609a      	str	r2, [r3, #8]
}
 8002078:	bf00      	nop
 800207a:	377c      	adds	r7, #124	; 0x7c
 800207c:	46bd      	mov	sp, r7
 800207e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002082:	bf00      	nop
 8002084:	40011000 	.word	0x40011000
 8002088:	40011400 	.word	0x40011400
 800208c:	51eb851f 	.word	0x51eb851f

08002090 <__NVIC_SetPriority>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80020e8:	2100      	movs	r1, #0
 80020ea:	f06f 0004 	mvn.w	r0, #4
 80020ee:	f7ff ffcf 	bl	8002090 <__NVIC_SetPriority>
#endif
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020fe:	f3ef 8305 	mrs	r3, IPSR
 8002102:	603b      	str	r3, [r7, #0]
  return(result);
 8002104:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800210a:	f06f 0305 	mvn.w	r3, #5
 800210e:	607b      	str	r3, [r7, #4]
 8002110:	e00c      	b.n	800212c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <osKernelInitialize+0x44>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d105      	bne.n	8002126 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <osKernelInitialize+0x44>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002120:	2300      	movs	r3, #0
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	e002      	b.n	800212c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000094 	.word	0x20000094

08002140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002146:	f3ef 8305 	mrs	r3, IPSR
 800214a:	603b      	str	r3, [r7, #0]
  return(result);
 800214c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002152:	f06f 0305 	mvn.w	r3, #5
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	e010      	b.n	800217c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <osKernelStart+0x48>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d109      	bne.n	8002176 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002162:	f7ff ffbf 	bl	80020e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <osKernelStart+0x48>)
 8002168:	2202      	movs	r2, #2
 800216a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800216c:	f001 fd38 	bl	8003be0 <vTaskStartScheduler>
      stat = osOK;
 8002170:	2300      	movs	r3, #0
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	e002      	b.n	800217c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295
 800217a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800217c:	687b      	ldr	r3, [r7, #4]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000094 	.word	0x20000094

0800218c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af04      	add	r7, sp, #16
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800219c:	f3ef 8305 	mrs	r3, IPSR
 80021a0:	617b      	str	r3, [r7, #20]
  return(result);
 80021a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d17e      	bne.n	80022a6 <osThreadNew+0x11a>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d07b      	beq.n	80022a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80021b2:	2318      	movs	r3, #24
 80021b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d045      	beq.n	8002252 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <osThreadNew+0x48>
        name = attr->name;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d002      	beq.n	80021e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <osThreadNew+0x6e>
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b38      	cmp	r3, #56	; 0x38
 80021ec:	d805      	bhi.n	80021fa <osThreadNew+0x6e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <osThreadNew+0x72>
        return (NULL);
 80021fa:	2300      	movs	r3, #0
 80021fc:	e054      	b.n	80022a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <osThreadNew+0xa8>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b5b      	cmp	r3, #91	; 0x5b
 800221c:	d90a      	bls.n	8002234 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <osThreadNew+0xa8>
        mem = 1;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	e010      	b.n	8002256 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d10c      	bne.n	8002256 <osThreadNew+0xca>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d108      	bne.n	8002256 <osThreadNew+0xca>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d104      	bne.n	8002256 <osThreadNew+0xca>
          mem = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	61bb      	str	r3, [r7, #24]
 8002250:	e001      	b.n	8002256 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d110      	bne.n	800227e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	6a3a      	ldr	r2, [r7, #32]
 8002270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f001 fade 	bl	8003834 <xTaskCreateStatic>
 8002278:	4603      	mov	r3, r0
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e013      	b.n	80022a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d110      	bne.n	80022a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	b29a      	uxth	r2, r3
 8002288:	f107 0310 	add.w	r3, r7, #16
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f001 fb29 	bl	80038ee <xTaskCreate>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <osThreadNew+0x11a>
            hTask = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80022a6:	693b      	ldr	r3, [r7, #16]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3728      	adds	r7, #40	; 0x28
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022b8:	f3ef 8305 	mrs	r3, IPSR
 80022bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80022be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <osDelay+0x1c>
    stat = osErrorISR;
 80022c4:	f06f 0305 	mvn.w	r3, #5
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	e007      	b.n	80022dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f001 fc4e 	bl	8003b78 <vTaskDelay>
    }
  }

  return (stat);
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b088      	sub	sp, #32
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022f2:	f3ef 8305 	mrs	r3, IPSR
 80022f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80022f8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d174      	bne.n	80023e8 <osMutexNew+0x102>
    if (attr != NULL) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <osMutexNew+0x26>
      type = attr->attr_bits;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	61bb      	str	r3, [r7, #24]
 800230a:	e001      	b.n	8002310 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <osMutexNew+0x3a>
      rmtx = 1U;
 800231a:	2301      	movs	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e001      	b.n	8002324 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d15c      	bne.n	80023e8 <osMutexNew+0x102>
      mem = -1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d006      	beq.n	8002350 <osMutexNew+0x6a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b4f      	cmp	r3, #79	; 0x4f
 8002348:	d902      	bls.n	8002350 <osMutexNew+0x6a>
          mem = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	e00c      	b.n	800236a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d108      	bne.n	800236a <osMutexNew+0x84>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <osMutexNew+0x84>
            mem = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
 8002364:	e001      	b.n	800236a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d112      	bne.n	8002396 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4619      	mov	r1, r3
 800237c:	2004      	movs	r0, #4
 800237e:	f000 fc48 	bl	8002c12 <xQueueCreateMutexStatic>
 8002382:	61f8      	str	r0, [r7, #28]
 8002384:	e016      	b.n	80023b4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4619      	mov	r1, r3
 800238c:	2001      	movs	r0, #1
 800238e:	f000 fc40 	bl	8002c12 <xQueueCreateMutexStatic>
 8002392:	61f8      	str	r0, [r7, #28]
 8002394:	e00e      	b.n	80023b4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10b      	bne.n	80023b4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80023a2:	2004      	movs	r0, #4
 80023a4:	f000 fc1d 	bl	8002be2 <xQueueCreateMutex>
 80023a8:	61f8      	str	r0, [r7, #28]
 80023aa:	e003      	b.n	80023b4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80023ac:	2001      	movs	r0, #1
 80023ae:	f000 fc18 	bl	8002be2 <xQueueCreateMutex>
 80023b2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00c      	beq.n	80023d4 <osMutexNew+0xee>
        if (attr != NULL) {
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <osMutexNew+0xe2>
          name = attr->name;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	e001      	b.n	80023cc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80023cc:	68f9      	ldr	r1, [r7, #12]
 80023ce:	69f8      	ldr	r0, [r7, #28]
 80023d0:	f001 f9d2 	bl	8003778 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <osMutexNew+0x102>
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80023e8:	69fb      	ldr	r3, [r7, #28]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002410:	f3ef 8305 	mrs	r3, IPSR
 8002414:	60bb      	str	r3, [r7, #8]
  return(result);
 8002416:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800241c:	f06f 0305 	mvn.w	r3, #5
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e02c      	b.n	800247e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d103      	bne.n	8002432 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800242a:	f06f 0303 	mvn.w	r3, #3
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e025      	b.n	800247e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d011      	beq.n	800245c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002438:	6839      	ldr	r1, [r7, #0]
 800243a:	6938      	ldr	r0, [r7, #16]
 800243c:	f000 fc38 	bl	8002cb0 <xQueueTakeMutexRecursive>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d01b      	beq.n	800247e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800244c:	f06f 0301 	mvn.w	r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	e014      	b.n	800247e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002454:	f06f 0302 	mvn.w	r3, #2
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e010      	b.n	800247e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800245c:	6839      	ldr	r1, [r7, #0]
 800245e:	6938      	ldr	r0, [r7, #16]
 8002460:	f000 fed6 	bl	8003210 <xQueueSemaphoreTake>
 8002464:	4603      	mov	r3, r0
 8002466:	2b01      	cmp	r3, #1
 8002468:	d009      	beq.n	800247e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8002470:	f06f 0301 	mvn.w	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	e002      	b.n	800247e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002478:	f06f 0302 	mvn.w	r3, #2
 800247c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800247e:	697b      	ldr	r3, [r7, #20]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a4:	f3ef 8305 	mrs	r3, IPSR
 80024a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80024aa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80024b0:	f06f 0305 	mvn.w	r3, #5
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e01f      	b.n	80024f8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80024be:	f06f 0303 	mvn.w	r3, #3
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e018      	b.n	80024f8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80024cc:	6938      	ldr	r0, [r7, #16]
 80024ce:	f000 fbbb 	bl	8002c48 <xQueueGiveMutexRecursive>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d00f      	beq.n	80024f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80024d8:	f06f 0302 	mvn.w	r3, #2
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e00b      	b.n	80024f8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	2200      	movs	r2, #0
 80024e4:	2100      	movs	r1, #0
 80024e6:	6938      	ldr	r0, [r7, #16]
 80024e8:	f000 fc18 	bl	8002d1c <xQueueGenericSend>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d002      	beq.n	80024f8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80024f2:	f06f 0302 	mvn.w	r3, #2
 80024f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80024f8:	697b      	ldr	r3, [r7, #20]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002502:	b580      	push	{r7, lr}
 8002504:	b08a      	sub	sp, #40	; 0x28
 8002506:	af02      	add	r7, sp, #8
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002512:	f3ef 8305 	mrs	r3, IPSR
 8002516:	613b      	str	r3, [r7, #16]
  return(result);
 8002518:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800251a:	2b00      	cmp	r3, #0
 800251c:	d15f      	bne.n	80025de <osMessageQueueNew+0xdc>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05c      	beq.n	80025de <osMessageQueueNew+0xdc>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d059      	beq.n	80025de <osMessageQueueNew+0xdc>
    mem = -1;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d029      	beq.n	800258a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <osMessageQueueNew+0x62>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b4f      	cmp	r3, #79	; 0x4f
 8002544:	d90e      	bls.n	8002564 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	429a      	cmp	r2, r3
 800255c:	d302      	bcc.n	8002564 <osMessageQueueNew+0x62>
        mem = 1;
 800255e:	2301      	movs	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	e014      	b.n	800258e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d110      	bne.n	800258e <osMessageQueueNew+0x8c>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10c      	bne.n	800258e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002578:	2b00      	cmp	r3, #0
 800257a:	d108      	bne.n	800258e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <osMessageQueueNew+0x8c>
          mem = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	e001      	b.n	800258e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d10b      	bne.n	80025ac <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2100      	movs	r1, #0
 800259e:	9100      	str	r1, [sp, #0]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fa2e 	bl	8002a04 <xQueueGenericCreateStatic>
 80025a8:	61f8      	str	r0, [r7, #28]
 80025aa:	e008      	b.n	80025be <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d105      	bne.n	80025be <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80025b2:	2200      	movs	r2, #0
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fa9c 	bl	8002af4 <xQueueGenericCreate>
 80025bc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d00c      	beq.n	80025de <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	e001      	b.n	80025d6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80025d6:	6979      	ldr	r1, [r7, #20]
 80025d8:	69f8      	ldr	r0, [r7, #28]
 80025da:	f001 f8cd 	bl	8003778 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80025de:	69fb      	ldr	r3, [r7, #28]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	4613      	mov	r3, r2
 80025f6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002600:	f3ef 8305 	mrs	r3, IPSR
 8002604:	617b      	str	r3, [r7, #20]
  return(result);
 8002606:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002608:	2b00      	cmp	r3, #0
 800260a:	d028      	beq.n	800265e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <osMessageQueuePut+0x36>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <osMessageQueuePut+0x36>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800261e:	f06f 0303 	mvn.w	r3, #3
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	e038      	b.n	8002698 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800262a:	f107 0210 	add.w	r2, r7, #16
 800262e:	2300      	movs	r3, #0
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	69b8      	ldr	r0, [r7, #24]
 8002634:	f000 fc70 	bl	8002f18 <xQueueGenericSendFromISR>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d003      	beq.n	8002646 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800263e:	f06f 0302 	mvn.w	r3, #2
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	e028      	b.n	8002698 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d025      	beq.n	8002698 <osMessageQueuePut+0xb0>
 800264c:	4b15      	ldr	r3, [pc, #84]	; (80026a4 <osMessageQueuePut+0xbc>)
 800264e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	e01c      	b.n	8002698 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <osMessageQueuePut+0x82>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800266a:	f06f 0303 	mvn.w	r3, #3
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e012      	b.n	8002698 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002672:	2300      	movs	r3, #0
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	69b8      	ldr	r0, [r7, #24]
 800267a:	f000 fb4f 	bl	8002d1c <xQueueGenericSend>
 800267e:	4603      	mov	r3, r0
 8002680:	2b01      	cmp	r3, #1
 8002682:	d009      	beq.n	8002698 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800268a:	f06f 0301 	mvn.w	r3, #1
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e002      	b.n	8002698 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002692:	f06f 0302 	mvn.w	r3, #2
 8002696:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002698:	69fb      	ldr	r3, [r7, #28]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000ed04 	.word	0xe000ed04

080026a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026be:	f3ef 8305 	mrs	r3, IPSR
 80026c2:	617b      	str	r3, [r7, #20]
  return(result);
 80026c4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d028      	beq.n	800271c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <osMessageQueueGet+0x34>
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d002      	beq.n	80026dc <osMessageQueueGet+0x34>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80026dc:	f06f 0303 	mvn.w	r3, #3
 80026e0:	61fb      	str	r3, [r7, #28]
 80026e2:	e037      	b.n	8002754 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80026e8:	f107 0310 	add.w	r3, r7, #16
 80026ec:	461a      	mov	r2, r3
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	69b8      	ldr	r0, [r7, #24]
 80026f2:	f000 fe99 	bl	8003428 <xQueueReceiveFromISR>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d003      	beq.n	8002704 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80026fc:	f06f 0302 	mvn.w	r3, #2
 8002700:	61fb      	str	r3, [r7, #28]
 8002702:	e027      	b.n	8002754 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d024      	beq.n	8002754 <osMessageQueueGet+0xac>
 800270a:	4b15      	ldr	r3, [pc, #84]	; (8002760 <osMessageQueueGet+0xb8>)
 800270c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	e01b      	b.n	8002754 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <osMessageQueueGet+0x80>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002728:	f06f 0303 	mvn.w	r3, #3
 800272c:	61fb      	str	r3, [r7, #28]
 800272e:	e011      	b.n	8002754 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	69b8      	ldr	r0, [r7, #24]
 8002736:	f000 fc8b 	bl	8003050 <xQueueReceive>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d009      	beq.n	8002754 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002746:	f06f 0301 	mvn.w	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	e002      	b.n	8002754 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800274e:	f06f 0302 	mvn.w	r3, #2
 8002752:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002754:	69fb      	ldr	r3, [r7, #28]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000ed04 	.word	0xe000ed04

08002764 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <vApplicationGetIdleTaskMemory+0x2c>)
 8002774:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4a06      	ldr	r2, [pc, #24]	; (8002794 <vApplicationGetIdleTaskMemory+0x30>)
 800277a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2280      	movs	r2, #128	; 0x80
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000098 	.word	0x20000098
 8002794:	200000f4 	.word	0x200000f4

08002798 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a07      	ldr	r2, [pc, #28]	; (80027c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80027a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <vApplicationGetTimerTaskMemory+0x30>)
 80027ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	200002f4 	.word	0x200002f4
 80027c8:	20000350 	.word	0x20000350

080027cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f103 0208 	add.w	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f04f 32ff 	mov.w	r2, #4294967295
 80027e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f103 0208 	add.w	r2, r3, #8
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f103 0208 	add.w	r2, r3, #8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
 800282e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	601a      	str	r2, [r3, #0]
}
 8002862:	bf00      	nop
 8002864:	3714      	adds	r7, #20
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d103      	bne.n	800288e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e00c      	b.n	80028a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	3308      	adds	r3, #8
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e002      	b.n	800289c <vListInsert+0x2e>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d2f6      	bcs.n	8002896 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6892      	ldr	r2, [r2, #8]
 80028f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6852      	ldr	r2, [r2, #4]
 8002900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	d103      	bne.n	8002914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800295a:	bf00      	nop
 800295c:	e7fe      	b.n	800295c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800295e:	f002 fbf1 	bl	8005144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	68f9      	ldr	r1, [r7, #12]
 800296c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	441a      	add	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298e:	3b01      	subs	r3, #1
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	441a      	add	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	22ff      	movs	r2, #255	; 0xff
 80029aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d114      	bne.n	80029de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d01a      	beq.n	80029f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3310      	adds	r3, #16
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fb97 	bl	80040f4 <xTaskRemoveFromEventList>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <xQueueGenericReset+0xcc>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	e009      	b.n	80029f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3310      	adds	r3, #16
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fef2 	bl	80027cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3324      	adds	r3, #36	; 0x24
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff feed 	bl	80027cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029f2:	f002 fbd7 	bl	80051a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08e      	sub	sp, #56	; 0x38
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d002      	beq.n	8002a56 <xQueueGenericCreateStatic+0x52>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <xQueueGenericCreateStatic+0x56>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericCreateStatic+0x58>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	623b      	str	r3, [r7, #32]
}
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <xQueueGenericCreateStatic+0x7e>
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <xQueueGenericCreateStatic+0x82>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <xQueueGenericCreateStatic+0x84>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	61fb      	str	r3, [r7, #28]
}
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002aa2:	2350      	movs	r3, #80	; 0x50
 8002aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b50      	cmp	r3, #80	; 0x50
 8002aaa:	d00a      	beq.n	8002ac2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab0:	f383 8811 	msr	BASEPRI, r3
 8002ab4:	f3bf 8f6f 	isb	sy
 8002ab8:	f3bf 8f4f 	dsb	sy
 8002abc:	61bb      	str	r3, [r7, #24]
}
 8002abe:	bf00      	nop
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ac2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ad6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f83f 	bl	8002b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3730      	adds	r7, #48	; 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	4613      	mov	r3, r2
 8002b00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	613b      	str	r3, [r7, #16]
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	3350      	adds	r3, #80	; 0x50
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fc2b 	bl	8005388 <pvPortMalloc>
 8002b32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d011      	beq.n	8002b5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	3350      	adds	r3, #80	; 0x50
 8002b42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b4c:	79fa      	ldrb	r2, [r7, #7]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4613      	mov	r3, r2
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f805 	bl	8002b68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
	}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
 8002b74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d103      	bne.n	8002b84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	69ba      	ldr	r2, [r7, #24]
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e002      	b.n	8002b8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b96:	2101      	movs	r1, #1
 8002b98:	69b8      	ldr	r0, [r7, #24]
 8002b9a:	f7ff fecb 	bl	8002934 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b082      	sub	sp, #8
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00e      	beq.n	8002bda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f8a1 	bl	8002d1c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002bf4:	79fb      	ldrb	r3, [r7, #7]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	6939      	ldr	r1, [r7, #16]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff7a 	bl	8002af4 <xQueueGenericCreate>
 8002c00:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff ffd3 	bl	8002bae <prvInitialiseMutex>

		return xNewQueue;
 8002c08:	68fb      	ldr	r3, [r7, #12]
	}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b088      	sub	sp, #32
 8002c16:	af02      	add	r7, sp, #8
 8002c18:	4603      	mov	r3, r0
 8002c1a:	6039      	str	r1, [r7, #0]
 8002c1c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	6978      	ldr	r0, [r7, #20]
 8002c32:	f7ff fee7 	bl	8002a04 <xQueueGenericCreateStatic>
 8002c36:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff ffb8 	bl	8002bae <prvInitialiseMutex>

		return xNewQueue;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
	}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b087      	sub	sp, #28
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10a      	bne.n	8002c70 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8002c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5e:	f383 8811 	msr	BASEPRI, r3
 8002c62:	f3bf 8f6f 	isb	sy
 8002c66:	f3bf 8f4f 	dsb	sy
 8002c6a:	60fb      	str	r3, [r7, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	e7fe      	b.n	8002c6e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	689c      	ldr	r4, [r3, #8]
 8002c74:	f001 fbfc 	bl	8004470 <xTaskGetCurrentTaskHandle>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	429c      	cmp	r4, r3
 8002c7c:	d111      	bne.n	8002ca2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	1e5a      	subs	r2, r3, #1
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002c90:	2300      	movs	r3, #0
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	6938      	ldr	r0, [r7, #16]
 8002c98:	f000 f840 	bl	8002d1c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	e001      	b.n	8002ca6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002ca6:	697b      	ldr	r3, [r7, #20]
	}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd90      	pop	{r4, r7, pc}

08002cb0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002cb0:	b590      	push	{r4, r7, lr}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	60fb      	str	r3, [r7, #12]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	689c      	ldr	r4, [r3, #8]
 8002cde:	f001 fbc7 	bl	8004470 <xTaskGetCurrentTaskHandle>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	429c      	cmp	r4, r3
 8002ce6:	d107      	bne.n	8002cf8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
 8002cf6:	e00c      	b.n	8002d12 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002cf8:	6839      	ldr	r1, [r7, #0]
 8002cfa:	6938      	ldr	r0, [r7, #16]
 8002cfc:	f000 fa88 	bl	8003210 <xQueueSemaphoreTake>
 8002d00:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002d12:	697b      	ldr	r3, [r7, #20]
	}
 8002d14:	4618      	mov	r0, r3
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd90      	pop	{r4, r7, pc}

08002d1c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b08e      	sub	sp, #56	; 0x38
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <xQueueGenericSend+0x32>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d103      	bne.n	8002d5c <xQueueGenericSend+0x40>
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <xQueueGenericSend+0x44>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <xQueueGenericSend+0x46>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <xQueueGenericSend+0x60>
	__asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d103      	bne.n	8002d8a <xQueueGenericSend+0x6e>
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <xQueueGenericSend+0x72>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericSend+0x74>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueGenericSend+0x8e>
	__asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	623b      	str	r3, [r7, #32]
}
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002daa:	f001 fb71 	bl	8004490 <xTaskGetSchedulerState>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <xQueueGenericSend+0x9e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueGenericSend+0xa2>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueGenericSend+0xa4>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueGenericSend+0xbe>
	__asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61fb      	str	r3, [r7, #28]
}
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dda:	f002 f9b3 	bl	8005144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d302      	bcc.n	8002df0 <xQueueGenericSend+0xd4>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d129      	bne.n	8002e44 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002df6:	f000 fbaf 	bl	8003558 <prvCopyDataToQueue>
 8002dfa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e06:	3324      	adds	r3, #36	; 0x24
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f001 f973 	bl	80040f4 <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <xQueueGenericSend+0x1f8>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	e00a      	b.n	8002e3c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e2c:	4b39      	ldr	r3, [pc, #228]	; (8002f14 <xQueueGenericSend+0x1f8>)
 8002e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e3c:	f002 f9b2 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e063      	b.n	8002f0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e4a:	f002 f9ab 	bl	80051a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e05c      	b.n	8002f0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 f9ad 	bl	80041bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e66:	f002 f99d 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e6a:	f000 ff1f 	bl	8003cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e6e:	f002 f969 	bl	8005144 <vPortEnterCritical>
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	b25b      	sxtb	r3, r3
 8002e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7e:	d103      	bne.n	8002e88 <xQueueGenericSend+0x16c>
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d103      	bne.n	8002e9e <xQueueGenericSend+0x182>
 8002e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e9e:	f002 f981 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ea2:	1d3a      	adds	r2, r7, #4
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f99c 	bl	80041e8 <xTaskCheckForTimeOut>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d124      	bne.n	8002f00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002eb6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb8:	f000 fc46 	bl	8003748 <prvIsQueueFull>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d018      	beq.n	8002ef4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	3310      	adds	r3, #16
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f8c2 	bl	8004054 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed2:	f000 fbd1 	bl	8003678 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ed6:	f000 fef7 	bl	8003cc8 <xTaskResumeAll>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f47f af7c 	bne.w	8002dda <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <xQueueGenericSend+0x1f8>)
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee8:	601a      	str	r2, [r3, #0]
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	e772      	b.n	8002dda <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ef6:	f000 fbbf 	bl	8003678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002efa:	f000 fee5 	bl	8003cc8 <xTaskResumeAll>
 8002efe:	e76c      	b.n	8002dda <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f02:	f000 fbb9 	bl	8003678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f06:	f000 fedf 	bl	8003cc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3738      	adds	r7, #56	; 0x38
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	e000ed04 	.word	0xe000ed04

08002f18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b090      	sub	sp, #64	; 0x40
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002f42:	bf00      	nop
 8002f44:	e7fe      	b.n	8002f44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <xQueueGenericSendFromISR+0x3c>
 8002f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <xQueueGenericSendFromISR+0x40>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <xQueueGenericSendFromISR+0x42>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f70:	bf00      	nop
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d103      	bne.n	8002f82 <xQueueGenericSendFromISR+0x6a>
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d101      	bne.n	8002f86 <xQueueGenericSendFromISR+0x6e>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <xQueueGenericSendFromISR+0x70>
 8002f86:	2300      	movs	r3, #0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	623b      	str	r3, [r7, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa2:	f002 f9b1 	bl	8005308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002fa6:	f3ef 8211 	mrs	r2, BASEPRI
 8002faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	61fa      	str	r2, [r7, #28]
 8002fbc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d302      	bcc.n	8002fd4 <xQueueGenericSendFromISR+0xbc>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d12f      	bne.n	8003034 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002fea:	f000 fab5 	bl	8003558 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d112      	bne.n	800301e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d016      	beq.n	800302e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	3324      	adds	r3, #36	; 0x24
 8003004:	4618      	mov	r0, r3
 8003006:	f001 f875 	bl	80040f4 <xTaskRemoveFromEventList>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00e      	beq.n	800302e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800301e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003022:	3301      	adds	r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	b25a      	sxtb	r2, r3
 8003028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800302e:	2301      	movs	r3, #1
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003032:	e001      	b.n	8003038 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003034:	2300      	movs	r3, #0
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003042:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003046:	4618      	mov	r0, r3
 8003048:	3740      	adds	r7, #64	; 0x40
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	; 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <xQueueReceive+0x30>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	623b      	str	r3, [r7, #32]
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d103      	bne.n	800308e <xQueueReceive+0x3e>
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <xQueueReceive+0x42>
 800308e:	2301      	movs	r3, #1
 8003090:	e000      	b.n	8003094 <xQueueReceive+0x44>
 8003092:	2300      	movs	r3, #0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <xQueueReceive+0x5e>
	__asm volatile
 8003098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309c:	f383 8811 	msr	BASEPRI, r3
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	61fb      	str	r3, [r7, #28]
}
 80030aa:	bf00      	nop
 80030ac:	e7fe      	b.n	80030ac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030ae:	f001 f9ef 	bl	8004490 <xTaskGetSchedulerState>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <xQueueReceive+0x6e>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <xQueueReceive+0x72>
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <xQueueReceive+0x74>
 80030c2:	2300      	movs	r3, #0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <xQueueReceive+0x8e>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	61bb      	str	r3, [r7, #24]
}
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030de:	f002 f831 	bl	8005144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01f      	beq.n	800312e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030f2:	f000 fa9b 	bl	800362c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	1e5a      	subs	r2, r3, #1
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00f      	beq.n	8003126 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	3310      	adds	r3, #16
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fff2 	bl	80040f4 <xTaskRemoveFromEventList>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003116:	4b3d      	ldr	r3, [pc, #244]	; (800320c <xQueueReceive+0x1bc>)
 8003118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003126:	f002 f83d 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 800312a:	2301      	movs	r3, #1
 800312c:	e069      	b.n	8003202 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d103      	bne.n	800313c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003134:	f002 f836 	bl	80051a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003138:	2300      	movs	r3, #0
 800313a:	e062      	b.n	8003202 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	4618      	mov	r0, r3
 8003148:	f001 f838 	bl	80041bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800314c:	2301      	movs	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003150:	f002 f828 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003154:	f000 fdaa 	bl	8003cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003158:	f001 fff4 	bl	8005144 <vPortEnterCritical>
 800315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003162:	b25b      	sxtb	r3, r3
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d103      	bne.n	8003172 <xQueueReceive+0x122>
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003178:	b25b      	sxtb	r3, r3
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d103      	bne.n	8003188 <xQueueReceive+0x138>
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003188:	f002 f80c 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800318c:	1d3a      	adds	r2, r7, #4
 800318e:	f107 0310 	add.w	r3, r7, #16
 8003192:	4611      	mov	r1, r2
 8003194:	4618      	mov	r0, r3
 8003196:	f001 f827 	bl	80041e8 <xTaskCheckForTimeOut>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d123      	bne.n	80031e8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a2:	f000 fabb 	bl	800371c <prvIsQueueEmpty>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	3324      	adds	r3, #36	; 0x24
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 ff4d 	bl	8004054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80031ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031bc:	f000 fa5c 	bl	8003678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80031c0:	f000 fd82 	bl	8003cc8 <xTaskResumeAll>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d189      	bne.n	80030de <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <xQueueReceive+0x1bc>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	e780      	b.n	80030de <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80031dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031de:	f000 fa4b 	bl	8003678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031e2:	f000 fd71 	bl	8003cc8 <xTaskResumeAll>
 80031e6:	e77a      	b.n	80030de <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80031e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031ea:	f000 fa45 	bl	8003678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ee:	f000 fd6b 	bl	8003cc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031f4:	f000 fa92 	bl	800371c <prvIsQueueEmpty>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f43f af6f 	beq.w	80030de <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003200:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003202:	4618      	mov	r0, r3
 8003204:	3730      	adds	r7, #48	; 0x30
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08e      	sub	sp, #56	; 0x38
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800321a:	2300      	movs	r3, #0
 800321c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003222:	2300      	movs	r3, #0
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800322c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003230:	f383 8811 	msr	BASEPRI, r3
 8003234:	f3bf 8f6f 	isb	sy
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	623b      	str	r3, [r7, #32]
}
 800323e:	bf00      	nop
 8003240:	e7fe      	b.n	8003240 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800324a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324e:	f383 8811 	msr	BASEPRI, r3
 8003252:	f3bf 8f6f 	isb	sy
 8003256:	f3bf 8f4f 	dsb	sy
 800325a:	61fb      	str	r3, [r7, #28]
}
 800325c:	bf00      	nop
 800325e:	e7fe      	b.n	800325e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003260:	f001 f916 	bl	8004490 <xTaskGetSchedulerState>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d102      	bne.n	8003270 <xQueueSemaphoreTake+0x60>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <xQueueSemaphoreTake+0x64>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <xQueueSemaphoreTake+0x66>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	61bb      	str	r3, [r7, #24]
}
 800328c:	bf00      	nop
 800328e:	e7fe      	b.n	800328e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003290:	f001 ff58 	bl	8005144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800329a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	d024      	beq.n	80032ea <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	1e5a      	subs	r2, r3, #1
 80032a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80032b0:	f001 fa64 	bl	800477c <pvTaskIncrementMutexHeldCount>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00f      	beq.n	80032e2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c4:	3310      	adds	r3, #16
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 ff14 	bl	80040f4 <xTaskRemoveFromEventList>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032d2:	4b54      	ldr	r3, [pc, #336]	; (8003424 <xQueueSemaphoreTake+0x214>)
 80032d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032e2:	f001 ff5f 	bl	80051a4 <vPortExitCritical>
				return pdPASS;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e097      	b.n	800341a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d111      	bne.n	8003314 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80032f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	617b      	str	r3, [r7, #20]
}
 8003308:	bf00      	nop
 800330a:	e7fe      	b.n	800330a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800330c:	f001 ff4a 	bl	80051a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003310:	2300      	movs	r3, #0
 8003312:	e082      	b.n	800341a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	4618      	mov	r0, r3
 8003320:	f000 ff4c 	bl	80041bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003328:	f001 ff3c 	bl	80051a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800332c:	f000 fcbe 	bl	8003cac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003330:	f001 ff08 	bl	8005144 <vPortEnterCritical>
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800333a:	b25b      	sxtb	r3, r3
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d103      	bne.n	800334a <xQueueSemaphoreTake+0x13a>
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800334a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003350:	b25b      	sxtb	r3, r3
 8003352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003356:	d103      	bne.n	8003360 <xQueueSemaphoreTake+0x150>
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003360:	f001 ff20 	bl	80051a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003364:	463a      	mov	r2, r7
 8003366:	f107 030c 	add.w	r3, r7, #12
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f000 ff3b 	bl	80041e8 <xTaskCheckForTimeOut>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d132      	bne.n	80033de <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800337a:	f000 f9cf 	bl	800371c <prvIsQueueEmpty>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d026      	beq.n	80033d2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800338c:	f001 feda 	bl	8005144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4618      	mov	r0, r3
 8003396:	f001 f899 	bl	80044cc <xTaskPriorityInherit>
 800339a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800339c:	f001 ff02 	bl	80051a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	3324      	adds	r3, #36	; 0x24
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fe53 	bl	8004054 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033b0:	f000 f962 	bl	8003678 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033b4:	f000 fc88 	bl	8003cc8 <xTaskResumeAll>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f47f af68 	bne.w	8003290 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80033c0:	4b18      	ldr	r3, [pc, #96]	; (8003424 <xQueueSemaphoreTake+0x214>)
 80033c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	e75e      	b.n	8003290 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80033d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033d4:	f000 f950 	bl	8003678 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033d8:	f000 fc76 	bl	8003cc8 <xTaskResumeAll>
 80033dc:	e758      	b.n	8003290 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80033de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033e0:	f000 f94a 	bl	8003678 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033e4:	f000 fc70 	bl	8003cc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033ea:	f000 f997 	bl	800371c <prvIsQueueEmpty>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f43f af4d 	beq.w	8003290 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80033f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80033fc:	f001 fea2 	bl	8005144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003400:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003402:	f000 f891 	bl	8003528 <prvGetDisinheritPriorityAfterTimeout>
 8003406:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800340e:	4618      	mov	r0, r3
 8003410:	f001 f932 	bl	8004678 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003414:	f001 fec6 	bl	80051a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003418:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800341a:	4618      	mov	r0, r3
 800341c:	3738      	adds	r7, #56	; 0x38
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	e000ed04 	.word	0xe000ed04

08003428 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	623b      	str	r3, [r7, #32]
}
 8003450:	bf00      	nop
 8003452:	e7fe      	b.n	8003452 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <xQueueReceiveFromISR+0x3a>
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <xQueueReceiveFromISR+0x3e>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <xQueueReceiveFromISR+0x40>
 8003466:	2300      	movs	r3, #0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	61fb      	str	r3, [r7, #28]
}
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003482:	f001 ff41 	bl	8005308 <vPortValidateInterruptPriority>
	__asm volatile
 8003486:	f3ef 8211 	mrs	r2, BASEPRI
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	61ba      	str	r2, [r7, #24]
 800349c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800349e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d02f      	beq.n	800350e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034bc:	f000 f8b6 	bl	800362c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80034c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d112      	bne.n	80034f8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	3310      	adds	r3, #16
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fe08 	bl	80040f4 <xTaskRemoveFromEventList>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00e      	beq.n	8003508 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e007      	b.n	8003508 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034fc:	3301      	adds	r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	b25a      	sxtb	r2, r3
 8003502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003508:	2301      	movs	r3, #1
 800350a:	637b      	str	r3, [r7, #52]	; 0x34
 800350c:	e001      	b.n	8003512 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800350e:	2300      	movs	r3, #0
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
 8003512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003514:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f383 8811 	msr	BASEPRI, r3
}
 800351c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003520:	4618      	mov	r0, r3
 8003522:	3738      	adds	r7, #56	; 0x38
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	e001      	b.n	800354a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800354a:	68fb      	ldr	r3, [r7, #12]
	}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10d      	bne.n	8003592 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d14d      	bne.n	800361a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f80a 	bl	800459c <xTaskPriorityDisinherit>
 8003588:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e043      	b.n	800361a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d119      	bne.n	80035cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6858      	ldr	r0, [r3, #4]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a0:	461a      	mov	r2, r3
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	f002 f904 	bl	80057b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d32b      	bcc.n	800361a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e026      	b.n	800361a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68d8      	ldr	r0, [r3, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	461a      	mov	r2, r3
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	f002 f8ea 	bl	80057b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	425b      	negs	r3, r3
 80035e6:	441a      	add	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d207      	bcs.n	8003608 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	425b      	negs	r3, r3
 8003602:	441a      	add	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d105      	bne.n	800361a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3b01      	subs	r3, #1
 8003618:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003622:	697b      	ldr	r3, [r7, #20]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	441a      	add	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d303      	bcc.n	8003660 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68d9      	ldr	r1, [r3, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	461a      	mov	r2, r3
 800366a:	6838      	ldr	r0, [r7, #0]
 800366c:	f002 f8a0 	bl	80057b0 <memcpy>
	}
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003680:	f001 fd60 	bl	8005144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800368a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800368c:	e011      	b.n	80036b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3324      	adds	r3, #36	; 0x24
 800369a:	4618      	mov	r0, r3
 800369c:	f000 fd2a 	bl	80040f4 <xTaskRemoveFromEventList>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80036a6:	f000 fe01 	bl	80042ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	dce9      	bgt.n	800368e <prvUnlockQueue+0x16>
 80036ba:	e000      	b.n	80036be <prvUnlockQueue+0x46>
					break;
 80036bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	22ff      	movs	r2, #255	; 0xff
 80036c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80036c6:	f001 fd6d 	bl	80051a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80036ca:	f001 fd3b 	bl	8005144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036d6:	e011      	b.n	80036fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d012      	beq.n	8003706 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3310      	adds	r3, #16
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fd05 	bl	80040f4 <xTaskRemoveFromEventList>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036f0:	f000 fddc 	bl	80042ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036f4:	7bbb      	ldrb	r3, [r7, #14]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003700:	2b00      	cmp	r3, #0
 8003702:	dce9      	bgt.n	80036d8 <prvUnlockQueue+0x60>
 8003704:	e000      	b.n	8003708 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003706:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	22ff      	movs	r2, #255	; 0xff
 800370c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003710:	f001 fd48 	bl	80051a4 <vPortExitCritical>
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003724:	f001 fd0e 	bl	8005144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	e001      	b.n	800373a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800373a:	f001 fd33 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 800373e:	68fb      	ldr	r3, [r7, #12]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003750:	f001 fcf8 	bl	8005144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	429a      	cmp	r2, r3
 800375e:	d102      	bne.n	8003766 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003760:	2301      	movs	r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e001      	b.n	800376a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003766:	2300      	movs	r3, #0
 8003768:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800376a:	f001 fd1b 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 800376e:	68fb      	ldr	r3, [r7, #12]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	e014      	b.n	80037b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003788:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <vQueueAddToRegistry+0x50>)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10b      	bne.n	80037ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003794:	490c      	ldr	r1, [pc, #48]	; (80037c8 <vQueueAddToRegistry+0x50>)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <vQueueAddToRegistry+0x50>)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80037aa:	e006      	b.n	80037ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b07      	cmp	r3, #7
 80037b6:	d9e7      	bls.n	8003788 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20004a14 	.word	0x20004a14

080037cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037dc:	f001 fcb2 	bl	8005144 <vPortEnterCritical>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e6:	b25b      	sxtb	r3, r3
 80037e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ec:	d103      	bne.n	80037f6 <vQueueWaitForMessageRestricted+0x2a>
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037fc:	b25b      	sxtb	r3, r3
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d103      	bne.n	800380c <vQueueWaitForMessageRestricted+0x40>
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800380c:	f001 fcca 	bl	80051a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d106      	bne.n	8003826 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	3324      	adds	r3, #36	; 0x24
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fc3b 	bl	800409c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7ff ff26 	bl	8003678 <prvUnlockQueue>
	}
 800382c:	bf00      	nop
 800382e:	3718      	adds	r7, #24
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08e      	sub	sp, #56	; 0x38
 8003838:	af04      	add	r7, sp, #16
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10a      	bne.n	800385e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	623b      	str	r3, [r7, #32]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xTaskCreateStatic+0x46>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	61fb      	str	r3, [r7, #28]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800387a:	235c      	movs	r3, #92	; 0x5c
 800387c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b5c      	cmp	r3, #92	; 0x5c
 8003882:	d00a      	beq.n	800389a <xTaskCreateStatic+0x66>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	61bb      	str	r3, [r7, #24]
}
 8003896:	bf00      	nop
 8003898:	e7fe      	b.n	8003898 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800389a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01e      	beq.n	80038e0 <xTaskCreateStatic+0xac>
 80038a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d01b      	beq.n	80038e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2202      	movs	r2, #2
 80038b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80038ba:	2300      	movs	r3, #0
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	9302      	str	r3, [sp, #8]
 80038c2:	f107 0314 	add.w	r3, r7, #20
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f850 	bl	8003978 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038da:	f000 f8dd 	bl	8003a98 <prvAddNewTaskToReadyList>
 80038de:	e001      	b.n	80038e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80038e4:	697b      	ldr	r3, [r7, #20]
	}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b08c      	sub	sp, #48	; 0x30
 80038f2:	af04      	add	r7, sp, #16
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80038fe:	88fb      	ldrh	r3, [r7, #6]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f001 fd40 	bl	8005388 <pvPortMalloc>
 8003908:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003910:	205c      	movs	r0, #92	; 0x5c
 8003912:	f001 fd39 	bl	8005388 <pvPortMalloc>
 8003916:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
 8003924:	e005      	b.n	8003932 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f001 fdfa 	bl	8005520 <vPortFree>
 800392c:	e001      	b.n	8003932 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800392e:	2300      	movs	r3, #0
 8003930:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d017      	beq.n	8003968 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003940:	88fa      	ldrh	r2, [r7, #6]
 8003942:	2300      	movs	r3, #0
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	9302      	str	r3, [sp, #8]
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f80e 	bl	8003978 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800395c:	69f8      	ldr	r0, [r7, #28]
 800395e:	f000 f89b 	bl	8003a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e002      	b.n	800396e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003968:	f04f 33ff 	mov.w	r3, #4294967295
 800396c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800396e:	69bb      	ldr	r3, [r7, #24]
	}
 8003970:	4618      	mov	r0, r3
 8003972:	3720      	adds	r7, #32
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	461a      	mov	r2, r3
 8003990:	21a5      	movs	r1, #165	; 0xa5
 8003992:	f001 ff1b 	bl	80057cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039a0:	3b01      	subs	r3, #1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f023 0307 	bic.w	r3, r3, #7
 80039ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	617b      	str	r3, [r7, #20]
}
 80039cc:	bf00      	nop
 80039ce:	e7fe      	b.n	80039ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01f      	beq.n	8003a16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e012      	b.n	8003a02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	7819      	ldrb	r1, [r3, #0]
 80039e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	4413      	add	r3, r2
 80039ea:	3334      	adds	r3, #52	; 0x34
 80039ec:	460a      	mov	r2, r1
 80039ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b0f      	cmp	r3, #15
 8003a06:	d9e9      	bls.n	80039dc <prvInitialiseNewTask+0x64>
 8003a08:	e000      	b.n	8003a0c <prvInitialiseNewTask+0x94>
			{
				break;
 8003a0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a14:	e003      	b.n	8003a1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a20:	2b37      	cmp	r3, #55	; 0x37
 8003a22:	d901      	bls.n	8003a28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a24:	2337      	movs	r3, #55	; 0x37
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	2200      	movs	r2, #0
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fee4 	bl	800280c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a46:	3318      	adds	r3, #24
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fedf 	bl	800280c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	2200      	movs	r2, #0
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	69b8      	ldr	r0, [r7, #24]
 8003a78:	f001 fa36 	bl	8004ee8 <pxPortInitialiseStack>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a8e:	bf00      	nop
 8003a90:	3720      	adds	r7, #32
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003aa0:	f001 fb50 	bl	8005144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <prvAddNewTaskToReadyList+0xc4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a2c      	ldr	r2, [pc, #176]	; (8003b5c <prvAddNewTaskToReadyList+0xc4>)
 8003aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <prvAddNewTaskToReadyList+0xc8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ab6:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <prvAddNewTaskToReadyList+0xc8>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <prvAddNewTaskToReadyList+0xc4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d110      	bne.n	8003ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ac4:	f000 fc16 	bl	80042f4 <prvInitialiseTaskLists>
 8003ac8:	e00d      	b.n	8003ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003aca:	4b26      	ldr	r3, [pc, #152]	; (8003b64 <prvAddNewTaskToReadyList+0xcc>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <prvAddNewTaskToReadyList+0xc8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d802      	bhi.n	8003ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ae0:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <prvAddNewTaskToReadyList+0xc8>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <prvAddNewTaskToReadyList+0xd0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3301      	adds	r3, #1
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <prvAddNewTaskToReadyList+0xd0>)
 8003aee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <prvAddNewTaskToReadyList+0xd0>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <prvAddNewTaskToReadyList+0xd4>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d903      	bls.n	8003b0c <prvAddNewTaskToReadyList+0x74>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b08:	4a18      	ldr	r2, [pc, #96]	; (8003b6c <prvAddNewTaskToReadyList+0xd4>)
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <prvAddNewTaskToReadyList+0xd8>)
 8003b1a:	441a      	add	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f7fe fe7f 	bl	8002826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b28:	f001 fb3c 	bl	80051a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <prvAddNewTaskToReadyList+0xcc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <prvAddNewTaskToReadyList+0xc8>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d207      	bcs.n	8003b52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <prvAddNewTaskToReadyList+0xdc>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20000c24 	.word	0x20000c24
 8003b60:	20000750 	.word	0x20000750
 8003b64:	20000c30 	.word	0x20000c30
 8003b68:	20000c40 	.word	0x20000c40
 8003b6c:	20000c2c 	.word	0x20000c2c
 8003b70:	20000754 	.word	0x20000754
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b8a:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <vTaskDelay+0x60>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <vTaskDelay+0x30>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60bb      	str	r3, [r7, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ba8:	f000 f880 	bl	8003cac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bac:	2100      	movs	r1, #0
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fdf8 	bl	80047a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bb4:	f000 f888 	bl	8003cc8 <xTaskResumeAll>
 8003bb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d107      	bne.n	8003bd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <vTaskDelay+0x64>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20000c4c 	.word	0x20000c4c
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bee:	463a      	mov	r2, r7
 8003bf0:	1d39      	adds	r1, r7, #4
 8003bf2:	f107 0308 	add.w	r3, r7, #8
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fdb4 	bl	8002764 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	9202      	str	r2, [sp, #8]
 8003c04:	9301      	str	r3, [sp, #4]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	460a      	mov	r2, r1
 8003c0e:	4921      	ldr	r1, [pc, #132]	; (8003c94 <vTaskStartScheduler+0xb4>)
 8003c10:	4821      	ldr	r0, [pc, #132]	; (8003c98 <vTaskStartScheduler+0xb8>)
 8003c12:	f7ff fe0f 	bl	8003834 <xTaskCreateStatic>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4a20      	ldr	r2, [pc, #128]	; (8003c9c <vTaskStartScheduler+0xbc>)
 8003c1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	; (8003c9c <vTaskStartScheduler+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c24:	2301      	movs	r3, #1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	e001      	b.n	8003c2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d102      	bne.n	8003c3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c34:	f000 fe0a 	bl	800484c <xTimerCreateTimerTask>
 8003c38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d116      	bne.n	8003c6e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	613b      	str	r3, [r7, #16]
}
 8003c52:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c54:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <vTaskStartScheduler+0xc0>)
 8003c56:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <vTaskStartScheduler+0xc4>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <vTaskStartScheduler+0xc8>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c68:	f001 f9ca 	bl	8005000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c6c:	e00e      	b.n	8003c8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d10a      	bne.n	8003c8c <vTaskStartScheduler+0xac>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	60fb      	str	r3, [r7, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <vTaskStartScheduler+0xaa>
}
 8003c8c:	bf00      	nop
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	080060a0 	.word	0x080060a0
 8003c98:	080042c5 	.word	0x080042c5
 8003c9c:	20000c48 	.word	0x20000c48
 8003ca0:	20000c44 	.word	0x20000c44
 8003ca4:	20000c30 	.word	0x20000c30
 8003ca8:	20000c28 	.word	0x20000c28

08003cac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <vTaskSuspendAll+0x18>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	4a03      	ldr	r2, [pc, #12]	; (8003cc4 <vTaskSuspendAll+0x18>)
 8003cb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003cba:	bf00      	nop
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20000c4c 	.word	0x20000c4c

08003cc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cd6:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <xTaskResumeAll+0x118>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce2:	f383 8811 	msr	BASEPRI, r3
 8003ce6:	f3bf 8f6f 	isb	sy
 8003cea:	f3bf 8f4f 	dsb	sy
 8003cee:	603b      	str	r3, [r7, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	e7fe      	b.n	8003cf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cf4:	f001 fa26 	bl	8005144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cf8:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <xTaskResumeAll+0x118>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	4a38      	ldr	r2, [pc, #224]	; (8003de0 <xTaskResumeAll+0x118>)
 8003d00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d02:	4b37      	ldr	r3, [pc, #220]	; (8003de0 <xTaskResumeAll+0x118>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d162      	bne.n	8003dd0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d0a:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <xTaskResumeAll+0x11c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d05e      	beq.n	8003dd0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d12:	e02f      	b.n	8003d74 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d14:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <xTaskResumeAll+0x120>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3318      	adds	r3, #24
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fe fddd 	bl	80028e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe fdd8 	bl	80028e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <xTaskResumeAll+0x124>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d903      	bls.n	8003d44 <xTaskResumeAll+0x7c>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	4a2a      	ldr	r2, [pc, #168]	; (8003dec <xTaskResumeAll+0x124>)
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <xTaskResumeAll+0x128>)
 8003d52:	441a      	add	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f7fe fd63 	bl	8002826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <xTaskResumeAll+0x12c>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d302      	bcc.n	8003d74 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d6e:	4b22      	ldr	r3, [pc, #136]	; (8003df8 <xTaskResumeAll+0x130>)
 8003d70:	2201      	movs	r2, #1
 8003d72:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d74:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <xTaskResumeAll+0x120>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1cb      	bne.n	8003d14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d82:	f000 fb55 	bl	8004430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d86:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <xTaskResumeAll+0x134>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d010      	beq.n	8003db4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d92:	f000 f847 	bl	8003e24 <xTaskIncrementTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d9c:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <xTaskResumeAll+0x130>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f1      	bne.n	8003d92 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003dae:	4b13      	ldr	r3, [pc, #76]	; (8003dfc <xTaskResumeAll+0x134>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003db4:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <xTaskResumeAll+0x130>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d009      	beq.n	8003dd0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dc0:	4b0f      	ldr	r3, [pc, #60]	; (8003e00 <xTaskResumeAll+0x138>)
 8003dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dd0:	f001 f9e8 	bl	80051a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003dd4:	68bb      	ldr	r3, [r7, #8]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000c4c 	.word	0x20000c4c
 8003de4:	20000c24 	.word	0x20000c24
 8003de8:	20000be4 	.word	0x20000be4
 8003dec:	20000c2c 	.word	0x20000c2c
 8003df0:	20000754 	.word	0x20000754
 8003df4:	20000750 	.word	0x20000750
 8003df8:	20000c38 	.word	0x20000c38
 8003dfc:	20000c34 	.word	0x20000c34
 8003e00:	e000ed04 	.word	0xe000ed04

08003e04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003e0a:	4b05      	ldr	r3, [pc, #20]	; (8003e20 <xTaskGetTickCount+0x1c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003e10:	687b      	ldr	r3, [r7, #4]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000c28 	.word	0x20000c28

08003e24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e2e:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <xTaskIncrementTick+0x148>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 808f 	bne.w	8003f56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e38:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <xTaskIncrementTick+0x14c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e40:	4a4b      	ldr	r2, [pc, #300]	; (8003f70 <xTaskIncrementTick+0x14c>)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d120      	bne.n	8003e8e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e4c:	4b49      	ldr	r3, [pc, #292]	; (8003f74 <xTaskIncrementTick+0x150>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00a      	beq.n	8003e6c <xTaskIncrementTick+0x48>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	603b      	str	r3, [r7, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	e7fe      	b.n	8003e6a <xTaskIncrementTick+0x46>
 8003e6c:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <xTaskIncrementTick+0x150>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <xTaskIncrementTick+0x154>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3f      	ldr	r2, [pc, #252]	; (8003f74 <xTaskIncrementTick+0x150>)
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <xTaskIncrementTick+0x154>)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <xTaskIncrementTick+0x158>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	3301      	adds	r3, #1
 8003e86:	4a3d      	ldr	r2, [pc, #244]	; (8003f7c <xTaskIncrementTick+0x158>)
 8003e88:	6013      	str	r3, [r2, #0]
 8003e8a:	f000 fad1 	bl	8004430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e8e:	4b3c      	ldr	r3, [pc, #240]	; (8003f80 <xTaskIncrementTick+0x15c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d349      	bcc.n	8003f2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e98:	4b36      	ldr	r3, [pc, #216]	; (8003f74 <xTaskIncrementTick+0x150>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea2:	4b37      	ldr	r3, [pc, #220]	; (8003f80 <xTaskIncrementTick+0x15c>)
 8003ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea8:	601a      	str	r2, [r3, #0]
					break;
 8003eaa:	e03f      	b.n	8003f2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eac:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <xTaskIncrementTick+0x150>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d203      	bcs.n	8003ecc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ec4:	4a2e      	ldr	r2, [pc, #184]	; (8003f80 <xTaskIncrementTick+0x15c>)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003eca:	e02f      	b.n	8003f2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fd05 	bl	80028e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3318      	adds	r3, #24
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fcfc 	bl	80028e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <xTaskIncrementTick+0x160>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d903      	bls.n	8003efc <xTaskIncrementTick+0xd8>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <xTaskIncrementTick+0x160>)
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4a1f      	ldr	r2, [pc, #124]	; (8003f88 <xTaskIncrementTick+0x164>)
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f7fe fc87 	bl	8002826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	; (8003f8c <xTaskIncrementTick+0x168>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d3b8      	bcc.n	8003e98 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f26:	2301      	movs	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f2a:	e7b5      	b.n	8003e98 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <xTaskIncrementTick+0x168>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f32:	4915      	ldr	r1, [pc, #84]	; (8003f88 <xTaskIncrementTick+0x164>)
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d901      	bls.n	8003f48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <xTaskIncrementTick+0x16c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	e004      	b.n	8003f60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f56:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <xTaskIncrementTick+0x170>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	4a0d      	ldr	r2, [pc, #52]	; (8003f94 <xTaskIncrementTick+0x170>)
 8003f5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f60:	697b      	ldr	r3, [r7, #20]
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000c4c 	.word	0x20000c4c
 8003f70:	20000c28 	.word	0x20000c28
 8003f74:	20000bdc 	.word	0x20000bdc
 8003f78:	20000be0 	.word	0x20000be0
 8003f7c:	20000c3c 	.word	0x20000c3c
 8003f80:	20000c44 	.word	0x20000c44
 8003f84:	20000c2c 	.word	0x20000c2c
 8003f88:	20000754 	.word	0x20000754
 8003f8c:	20000750 	.word	0x20000750
 8003f90:	20000c38 	.word	0x20000c38
 8003f94:	20000c34 	.word	0x20000c34

08003f98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f9e:	4b28      	ldr	r3, [pc, #160]	; (8004040 <vTaskSwitchContext+0xa8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fa6:	4b27      	ldr	r3, [pc, #156]	; (8004044 <vTaskSwitchContext+0xac>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fac:	e041      	b.n	8004032 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003fae:	4b25      	ldr	r3, [pc, #148]	; (8004044 <vTaskSwitchContext+0xac>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb4:	4b24      	ldr	r3, [pc, #144]	; (8004048 <vTaskSwitchContext+0xb0>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e010      	b.n	8003fde <vTaskSwitchContext+0x46>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	607b      	str	r3, [r7, #4]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <vTaskSwitchContext+0x3e>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	491b      	ldr	r1, [pc, #108]	; (800404c <vTaskSwitchContext+0xb4>)
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0e4      	beq.n	8003fbc <vTaskSwitchContext+0x24>
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4a13      	ldr	r2, [pc, #76]	; (800404c <vTaskSwitchContext+0xb4>)
 8003ffe:	4413      	add	r3, r2
 8004000:	60bb      	str	r3, [r7, #8]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	605a      	str	r2, [r3, #4]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	3308      	adds	r3, #8
 8004014:	429a      	cmp	r2, r3
 8004016:	d104      	bne.n	8004022 <vTaskSwitchContext+0x8a>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <vTaskSwitchContext+0xb8>)
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	4a06      	ldr	r2, [pc, #24]	; (8004048 <vTaskSwitchContext+0xb0>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6013      	str	r3, [r2, #0]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000c4c 	.word	0x20000c4c
 8004044:	20000c38 	.word	0x20000c38
 8004048:	20000c2c 	.word	0x20000c2c
 800404c:	20000754 	.word	0x20000754
 8004050:	20000750 	.word	0x20000750

08004054 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60fb      	str	r3, [r7, #12]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <vTaskPlaceOnEventList+0x44>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3318      	adds	r3, #24
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fbf3 	bl	800286e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004088:	2101      	movs	r1, #1
 800408a:	6838      	ldr	r0, [r7, #0]
 800408c:	f000 fb8a 	bl	80047a4 <prvAddCurrentTaskToDelayedList>
}
 8004090:	bf00      	nop
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20000750 	.word	0x20000750

0800409c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	617b      	str	r3, [r7, #20]
}
 80040c0:	bf00      	nop
 80040c2:	e7fe      	b.n	80040c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3318      	adds	r3, #24
 80040ca:	4619      	mov	r1, r3
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f7fe fbaa 	bl	8002826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295
 80040dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68b8      	ldr	r0, [r7, #8]
 80040e2:	f000 fb5f 	bl	80047a4 <prvAddCurrentTaskToDelayedList>
	}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000750 	.word	0x20000750

080040f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
}
 800411c:	bf00      	nop
 800411e:	e7fe      	b.n	800411e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	3318      	adds	r3, #24
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fbdb 	bl	80028e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <xTaskRemoveFromEventList+0xb0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d11d      	bne.n	800416e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3304      	adds	r3, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fbd2 	bl	80028e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <xTaskRemoveFromEventList+0xb4>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d903      	bls.n	8004150 <xTaskRemoveFromEventList+0x5c>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	4a16      	ldr	r2, [pc, #88]	; (80041a8 <xTaskRemoveFromEventList+0xb4>)
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a13      	ldr	r2, [pc, #76]	; (80041ac <xTaskRemoveFromEventList+0xb8>)
 800415e:	441a      	add	r2, r3
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fe fb5d 	bl	8002826 <vListInsertEnd>
 800416c:	e005      	b.n	800417a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3318      	adds	r3, #24
 8004172:	4619      	mov	r1, r3
 8004174:	480e      	ldr	r0, [pc, #56]	; (80041b0 <xTaskRemoveFromEventList+0xbc>)
 8004176:	f7fe fb56 	bl	8002826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800417e:	4b0d      	ldr	r3, [pc, #52]	; (80041b4 <xTaskRemoveFromEventList+0xc0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	429a      	cmp	r2, r3
 8004186:	d905      	bls.n	8004194 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <xTaskRemoveFromEventList+0xc4>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e001      	b.n	8004198 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004194:	2300      	movs	r3, #0
 8004196:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004198:	697b      	ldr	r3, [r7, #20]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000c4c 	.word	0x20000c4c
 80041a8:	20000c2c 	.word	0x20000c2c
 80041ac:	20000754 	.word	0x20000754
 80041b0:	20000be4 	.word	0x20000be4
 80041b4:	20000750 	.word	0x20000750
 80041b8:	20000c38 	.word	0x20000c38

080041bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <vTaskInternalSetTimeOutState+0x24>)
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <vTaskInternalSetTimeOutState+0x28>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	605a      	str	r2, [r3, #4]
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000c3c 	.word	0x20000c3c
 80041e4:	20000c28 	.word	0x20000c28

080041e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	613b      	str	r3, [r7, #16]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800422a:	f000 ff8b 	bl	8005144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800422e:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <xTaskCheckForTimeOut+0xbc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004246:	d102      	bne.n	800424e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004248:	2300      	movs	r3, #0
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e023      	b.n	8004296 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <xTaskCheckForTimeOut+0xc0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d007      	beq.n	800426a <xTaskCheckForTimeOut+0x82>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	429a      	cmp	r2, r3
 8004262:	d302      	bcc.n	800426a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004264:	2301      	movs	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e015      	b.n	8004296 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	d20b      	bcs.n	800428c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	1ad2      	subs	r2, r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff9b 	bl	80041bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004286:	2300      	movs	r3, #0
 8004288:	61fb      	str	r3, [r7, #28]
 800428a:	e004      	b.n	8004296 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2200      	movs	r2, #0
 8004290:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004292:	2301      	movs	r3, #1
 8004294:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004296:	f000 ff85 	bl	80051a4 <vPortExitCritical>

	return xReturn;
 800429a:	69fb      	ldr	r3, [r7, #28]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3720      	adds	r7, #32
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000c28 	.word	0x20000c28
 80042a8:	20000c3c 	.word	0x20000c3c

080042ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <vTaskMissedYield+0x14>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000c38 	.word	0x20000c38

080042c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042cc:	f000 f852 	bl	8004374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042d0:	4b06      	ldr	r3, [pc, #24]	; (80042ec <prvIdleTask+0x28>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d9f9      	bls.n	80042cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <prvIdleTask+0x2c>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042e8:	e7f0      	b.n	80042cc <prvIdleTask+0x8>
 80042ea:	bf00      	nop
 80042ec:	20000754 	.word	0x20000754
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	e00c      	b.n	800431a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4a12      	ldr	r2, [pc, #72]	; (8004354 <prvInitialiseTaskLists+0x60>)
 800430c:	4413      	add	r3, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fa5c 	bl	80027cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3301      	adds	r3, #1
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b37      	cmp	r3, #55	; 0x37
 800431e:	d9ef      	bls.n	8004300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004320:	480d      	ldr	r0, [pc, #52]	; (8004358 <prvInitialiseTaskLists+0x64>)
 8004322:	f7fe fa53 	bl	80027cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004326:	480d      	ldr	r0, [pc, #52]	; (800435c <prvInitialiseTaskLists+0x68>)
 8004328:	f7fe fa50 	bl	80027cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800432c:	480c      	ldr	r0, [pc, #48]	; (8004360 <prvInitialiseTaskLists+0x6c>)
 800432e:	f7fe fa4d 	bl	80027cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004332:	480c      	ldr	r0, [pc, #48]	; (8004364 <prvInitialiseTaskLists+0x70>)
 8004334:	f7fe fa4a 	bl	80027cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004338:	480b      	ldr	r0, [pc, #44]	; (8004368 <prvInitialiseTaskLists+0x74>)
 800433a:	f7fe fa47 	bl	80027cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800433e:	4b0b      	ldr	r3, [pc, #44]	; (800436c <prvInitialiseTaskLists+0x78>)
 8004340:	4a05      	ldr	r2, [pc, #20]	; (8004358 <prvInitialiseTaskLists+0x64>)
 8004342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <prvInitialiseTaskLists+0x7c>)
 8004346:	4a05      	ldr	r2, [pc, #20]	; (800435c <prvInitialiseTaskLists+0x68>)
 8004348:	601a      	str	r2, [r3, #0]
}
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000754 	.word	0x20000754
 8004358:	20000bb4 	.word	0x20000bb4
 800435c:	20000bc8 	.word	0x20000bc8
 8004360:	20000be4 	.word	0x20000be4
 8004364:	20000bf8 	.word	0x20000bf8
 8004368:	20000c10 	.word	0x20000c10
 800436c:	20000bdc 	.word	0x20000bdc
 8004370:	20000be0 	.word	0x20000be0

08004374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800437a:	e019      	b.n	80043b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800437c:	f000 fee2 	bl	8005144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004380:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <prvCheckTasksWaitingTermination+0x50>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4618      	mov	r0, r3
 800438e:	f7fe faa7 	bl	80028e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004392:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <prvCheckTasksWaitingTermination+0x54>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <prvCheckTasksWaitingTermination+0x54>)
 800439a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800439c:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <prvCheckTasksWaitingTermination+0x58>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	4a0a      	ldr	r2, [pc, #40]	; (80043cc <prvCheckTasksWaitingTermination+0x58>)
 80043a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043a6:	f000 fefd 	bl	80051a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f810 	bl	80043d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <prvCheckTasksWaitingTermination+0x58>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e1      	bne.n	800437c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000bf8 	.word	0x20000bf8
 80043c8:	20000c24 	.word	0x20000c24
 80043cc:	20000c0c 	.word	0x20000c0c

080043d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d108      	bne.n	80043f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	4618      	mov	r0, r3
 80043e8:	f001 f89a 	bl	8005520 <vPortFree>
				vPortFree( pxTCB );
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f001 f897 	bl	8005520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043f2:	e018      	b.n	8004426 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d103      	bne.n	8004406 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f001 f88e 	bl	8005520 <vPortFree>
	}
 8004404:	e00f      	b.n	8004426 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800440c:	2b02      	cmp	r3, #2
 800440e:	d00a      	beq.n	8004426 <prvDeleteTCB+0x56>
	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60fb      	str	r3, [r7, #12]
}
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <prvDeleteTCB+0x54>
	}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <prvResetNextTaskUnblockTime+0x38>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <prvResetNextTaskUnblockTime+0x3c>)
 8004442:	f04f 32ff 	mov.w	r2, #4294967295
 8004446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004448:	e008      	b.n	800445c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800444a:	4b07      	ldr	r3, [pc, #28]	; (8004468 <prvResetNextTaskUnblockTime+0x38>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a04      	ldr	r2, [pc, #16]	; (800446c <prvResetNextTaskUnblockTime+0x3c>)
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	20000bdc 	.word	0x20000bdc
 800446c:	20000c44 	.word	0x20000c44

08004470 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <xTaskGetCurrentTaskHandle+0x1c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800447c:	687b      	ldr	r3, [r7, #4]
	}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000750 	.word	0x20000750

08004490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004496:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <xTaskGetSchedulerState+0x34>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800449e:	2301      	movs	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	e008      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a4:	4b08      	ldr	r3, [pc, #32]	; (80044c8 <xTaskGetSchedulerState+0x38>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d102      	bne.n	80044b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044ac:	2302      	movs	r3, #2
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e001      	b.n	80044b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044b2:	2300      	movs	r3, #0
 80044b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044b6:	687b      	ldr	r3, [r7, #4]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	20000c30 	.word	0x20000c30
 80044c8:	20000c4c 	.word	0x20000c4c

080044cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d051      	beq.n	8004586 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <xTaskPriorityInherit+0xc4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d241      	bcs.n	8004574 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	db06      	blt.n	8004506 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <xTaskPriorityInherit+0xc4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	6959      	ldr	r1, [r3, #20]
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	4613      	mov	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4a1f      	ldr	r2, [pc, #124]	; (8004594 <xTaskPriorityInherit+0xc8>)
 8004518:	4413      	add	r3, r2
 800451a:	4299      	cmp	r1, r3
 800451c:	d122      	bne.n	8004564 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3304      	adds	r3, #4
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe f9dc 	bl	80028e0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <xTaskPriorityInherit+0xc4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	4b18      	ldr	r3, [pc, #96]	; (8004598 <xTaskPriorityInherit+0xcc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d903      	bls.n	8004546 <xTaskPriorityInherit+0x7a>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	4a15      	ldr	r2, [pc, #84]	; (8004598 <xTaskPriorityInherit+0xcc>)
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <xTaskPriorityInherit+0xc8>)
 8004554:	441a      	add	r2, r3
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f7fe f962 	bl	8002826 <vListInsertEnd>
 8004562:	e004      	b.n	800456e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004564:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <xTaskPriorityInherit+0xc4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	e008      	b.n	8004586 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <xTaskPriorityInherit+0xc4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	429a      	cmp	r2, r3
 8004580:	d201      	bcs.n	8004586 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004582:	2301      	movs	r3, #1
 8004584:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004586:	68fb      	ldr	r3, [r7, #12]
	}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20000750 	.word	0x20000750
 8004594:	20000754 	.word	0x20000754
 8004598:	20000c2c 	.word	0x20000c2c

0800459c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d056      	beq.n	8004660 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <xTaskPriorityDisinherit+0xd0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d00a      	beq.n	80045d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10a      	bne.n	80045f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60bb      	str	r3, [r7, #8]
}
 80045ec:	bf00      	nop
 80045ee:	e7fe      	b.n	80045ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f4:	1e5a      	subs	r2, r3, #1
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004602:	429a      	cmp	r2, r3
 8004604:	d02c      	beq.n	8004660 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460a:	2b00      	cmp	r3, #0
 800460c:	d128      	bne.n	8004660 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	3304      	adds	r3, #4
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe f964 	bl	80028e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <xTaskPriorityDisinherit+0xd4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d903      	bls.n	8004640 <xTaskPriorityDisinherit+0xa4>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	4a0c      	ldr	r2, [pc, #48]	; (8004670 <xTaskPriorityDisinherit+0xd4>)
 800463e:	6013      	str	r3, [r2, #0]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004644:	4613      	mov	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4a09      	ldr	r2, [pc, #36]	; (8004674 <xTaskPriorityDisinherit+0xd8>)
 800464e:	441a      	add	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	3304      	adds	r3, #4
 8004654:	4619      	mov	r1, r3
 8004656:	4610      	mov	r0, r2
 8004658:	f7fe f8e5 	bl	8002826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800465c:	2301      	movs	r3, #1
 800465e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004660:	697b      	ldr	r3, [r7, #20]
	}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000750 	.word	0x20000750
 8004670:	20000c2c 	.word	0x20000c2c
 8004674:	20000754 	.word	0x20000754

08004678 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004686:	2301      	movs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d06a      	beq.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10a      	bne.n	80046ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	60fb      	str	r3, [r7, #12]
}
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d902      	bls.n	80046be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	e002      	b.n	80046c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d04b      	beq.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d146      	bne.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046d8:	4b25      	ldr	r3, [pc, #148]	; (8004770 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d10a      	bne.n	80046f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	60bb      	str	r3, [r7, #8]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	69fa      	ldr	r2, [r7, #28]
 8004702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	db04      	blt.n	8004716 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6959      	ldr	r1, [r3, #20]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4a13      	ldr	r2, [pc, #76]	; (8004774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004726:	4413      	add	r3, r2
 8004728:	4299      	cmp	r1, r3
 800472a:	d11c      	bne.n	8004766 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	3304      	adds	r3, #4
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe f8d5 	bl	80028e0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	4b0f      	ldr	r3, [pc, #60]	; (8004778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d903      	bls.n	800474a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	4a0c      	ldr	r2, [pc, #48]	; (8004778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4a07      	ldr	r2, [pc, #28]	; (8004774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004758:	441a      	add	r2, r3
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3304      	adds	r3, #4
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7fe f860 	bl	8002826 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004766:	bf00      	nop
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000750 	.word	0x20000750
 8004774:	20000754 	.word	0x20000754
 8004778:	20000c2c 	.word	0x20000c2c

0800477c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004788:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800478e:	3201      	adds	r2, #1
 8004790:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004792:	4b03      	ldr	r3, [pc, #12]	; (80047a0 <pvTaskIncrementMutexHeldCount+0x24>)
 8004794:	681b      	ldr	r3, [r3, #0]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000750 	.word	0x20000750

080047a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ae:	4b21      	ldr	r3, [pc, #132]	; (8004834 <prvAddCurrentTaskToDelayedList+0x90>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <prvAddCurrentTaskToDelayedList+0x94>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f890 	bl	80028e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d10a      	bne.n	80047de <prvAddCurrentTaskToDelayedList+0x3a>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ce:	4b1a      	ldr	r3, [pc, #104]	; (8004838 <prvAddCurrentTaskToDelayedList+0x94>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4819      	ldr	r0, [pc, #100]	; (800483c <prvAddCurrentTaskToDelayedList+0x98>)
 80047d8:	f7fe f825 	bl	8002826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047dc:	e026      	b.n	800482c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047e6:	4b14      	ldr	r3, [pc, #80]	; (8004838 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d209      	bcs.n	800480a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <prvAddCurrentTaskToDelayedList+0x94>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fe f833 	bl	800286e <vListInsert>
}
 8004808:	e010      	b.n	800482c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480a:	4b0e      	ldr	r3, [pc, #56]	; (8004844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	4b0a      	ldr	r3, [pc, #40]	; (8004838 <prvAddCurrentTaskToDelayedList+0x94>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fe f829 	bl	800286e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800481c:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	429a      	cmp	r2, r3
 8004824:	d202      	bcs.n	800482c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004826:	4a08      	ldr	r2, [pc, #32]	; (8004848 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6013      	str	r3, [r2, #0]
}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000c28 	.word	0x20000c28
 8004838:	20000750 	.word	0x20000750
 800483c:	20000c10 	.word	0x20000c10
 8004840:	20000be0 	.word	0x20000be0
 8004844:	20000bdc 	.word	0x20000bdc
 8004848:	20000c44 	.word	0x20000c44

0800484c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004856:	f000 fb07 	bl	8004e68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800485a:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <xTimerCreateTimerTask+0x80>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d021      	beq.n	80048a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800486a:	1d3a      	adds	r2, r7, #4
 800486c:	f107 0108 	add.w	r1, r7, #8
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	4618      	mov	r0, r3
 8004876:	f7fd ff8f 	bl	8002798 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	9202      	str	r2, [sp, #8]
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	2302      	movs	r3, #2
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2300      	movs	r3, #0
 800488a:	460a      	mov	r2, r1
 800488c:	4910      	ldr	r1, [pc, #64]	; (80048d0 <xTimerCreateTimerTask+0x84>)
 800488e:	4811      	ldr	r0, [pc, #68]	; (80048d4 <xTimerCreateTimerTask+0x88>)
 8004890:	f7fe ffd0 	bl	8003834 <xTaskCreateStatic>
 8004894:	4603      	mov	r3, r0
 8004896:	4a10      	ldr	r2, [pc, #64]	; (80048d8 <xTimerCreateTimerTask+0x8c>)
 8004898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800489a:	4b0f      	ldr	r3, [pc, #60]	; (80048d8 <xTimerCreateTimerTask+0x8c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048a2:	2301      	movs	r3, #1
 80048a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10a      	bne.n	80048c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b0:	f383 8811 	msr	BASEPRI, r3
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	f3bf 8f4f 	dsb	sy
 80048bc:	613b      	str	r3, [r7, #16]
}
 80048be:	bf00      	nop
 80048c0:	e7fe      	b.n	80048c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048c2:	697b      	ldr	r3, [r7, #20]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000c80 	.word	0x20000c80
 80048d0:	080060a8 	.word	0x080060a8
 80048d4:	08004a11 	.word	0x08004a11
 80048d8:	20000c84 	.word	0x20000c84

080048dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <xTimerGenericCommand+0x2e>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	623b      	str	r3, [r7, #32]
}
 8004906:	bf00      	nop
 8004908:	e7fe      	b.n	8004908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800490a:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <xTimerGenericCommand+0x98>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d02a      	beq.n	8004968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b05      	cmp	r3, #5
 8004922:	dc18      	bgt.n	8004956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004924:	f7ff fdb4 	bl	8004490 <xTaskGetSchedulerState>
 8004928:	4603      	mov	r3, r0
 800492a:	2b02      	cmp	r3, #2
 800492c:	d109      	bne.n	8004942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <xTimerGenericCommand+0x98>)
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	f107 0110 	add.w	r1, r7, #16
 8004936:	2300      	movs	r3, #0
 8004938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493a:	f7fe f9ef 	bl	8002d1c <xQueueGenericSend>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24
 8004940:	e012      	b.n	8004968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004942:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <xTimerGenericCommand+0x98>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f107 0110 	add.w	r1, r7, #16
 800494a:	2300      	movs	r3, #0
 800494c:	2200      	movs	r2, #0
 800494e:	f7fe f9e5 	bl	8002d1c <xQueueGenericSend>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24
 8004954:	e008      	b.n	8004968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <xTimerGenericCommand+0x98>)
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	f107 0110 	add.w	r1, r7, #16
 800495e:	2300      	movs	r3, #0
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	f7fe fad9 	bl	8002f18 <xQueueGenericSendFromISR>
 8004966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800496a:	4618      	mov	r0, r3
 800496c:	3728      	adds	r7, #40	; 0x28
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000c80 	.word	0x20000c80

08004978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004982:	4b22      	ldr	r3, [pc, #136]	; (8004a0c <prvProcessExpiredTimer+0x94>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	3304      	adds	r3, #4
 8004990:	4618      	mov	r0, r3
 8004992:	f7fd ffa5 	bl	80028e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d022      	beq.n	80049ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	18d1      	adds	r1, r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	6978      	ldr	r0, [r7, #20]
 80049b2:	f000 f8d1 	bl	8004b58 <prvInsertTimerInActiveList>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01f      	beq.n	80049fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049bc:	2300      	movs	r3, #0
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	2100      	movs	r1, #0
 80049c6:	6978      	ldr	r0, [r7, #20]
 80049c8:	f7ff ff88 	bl	80048dc <xTimerGenericCommand>
 80049cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d113      	bne.n	80049fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	60fb      	str	r3, [r7, #12]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	6978      	ldr	r0, [r7, #20]
 8004a02:	4798      	blx	r3
}
 8004a04:	bf00      	nop
 8004a06:	3718      	adds	r7, #24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20000c78 	.word	0x20000c78

08004a10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a18:	f107 0308 	add.w	r3, r7, #8
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f000 f857 	bl	8004ad0 <prvGetNextExpireTime>
 8004a22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4619      	mov	r1, r3
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f803 	bl	8004a34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a2e:	f000 f8d5 	bl	8004bdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a32:	e7f1      	b.n	8004a18 <prvTimerTask+0x8>

08004a34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a3e:	f7ff f935 	bl	8003cac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f866 	bl	8004b18 <prvSampleTimeNow>
 8004a4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d130      	bne.n	8004ab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <prvProcessTimerOrBlockTask+0x3c>
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d806      	bhi.n	8004a70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a62:	f7ff f931 	bl	8003cc8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a66:	68f9      	ldr	r1, [r7, #12]
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7ff ff85 	bl	8004978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a6e:	e024      	b.n	8004aba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d008      	beq.n	8004a88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <prvProcessTimerOrBlockTask+0x90>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <prvProcessTimerOrBlockTask+0x50>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <prvProcessTimerOrBlockTask+0x52>
 8004a84:	2300      	movs	r3, #0
 8004a86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a88:	4b0f      	ldr	r3, [pc, #60]	; (8004ac8 <prvProcessTimerOrBlockTask+0x94>)
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	683a      	ldr	r2, [r7, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	f7fe fe99 	bl	80037cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a9a:	f7ff f915 	bl	8003cc8 <xTaskResumeAll>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <prvProcessTimerOrBlockTask+0x98>)
 8004aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	f3bf 8f6f 	isb	sy
}
 8004ab4:	e001      	b.n	8004aba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ab6:	f7ff f907 	bl	8003cc8 <xTaskResumeAll>
}
 8004aba:	bf00      	nop
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000c7c 	.word	0x20000c7c
 8004ac8:	20000c80 	.word	0x20000c80
 8004acc:	e000ed04 	.word	0xe000ed04

08004ad0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ad8:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <prvGetNextExpireTime+0x44>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <prvGetNextExpireTime+0x16>
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	e000      	b.n	8004ae8 <prvGetNextExpireTime+0x18>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d105      	bne.n	8004b00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004af4:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <prvGetNextExpireTime+0x44>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60fb      	str	r3, [r7, #12]
 8004afe:	e001      	b.n	8004b04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	20000c78 	.word	0x20000c78

08004b18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b20:	f7ff f970 	bl	8003e04 <xTaskGetTickCount>
 8004b24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <prvSampleTimeNow+0x3c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d205      	bcs.n	8004b3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b30:	f000 f936 	bl	8004da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e002      	b.n	8004b42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b42:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <prvSampleTimeNow+0x3c>)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b48:	68fb      	ldr	r3, [r7, #12]
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000c88 	.word	0x20000c88

08004b58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d812      	bhi.n	8004ba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	1ad2      	subs	r2, r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e01b      	b.n	8004bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b92:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <prvInsertTimerInActiveList+0x7c>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4610      	mov	r0, r2
 8004b9e:	f7fd fe66 	bl	800286e <vListInsert>
 8004ba2:	e012      	b.n	8004bca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d206      	bcs.n	8004bba <prvInsertTimerInActiveList+0x62>
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e007      	b.n	8004bca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <prvInsertTimerInActiveList+0x80>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f7fd fe52 	bl	800286e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bca:	697b      	ldr	r3, [r7, #20]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	20000c7c 	.word	0x20000c7c
 8004bd8:	20000c78 	.word	0x20000c78

08004bdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08e      	sub	sp, #56	; 0x38
 8004be0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004be2:	e0ca      	b.n	8004d7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da18      	bge.n	8004c1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bea:	1d3b      	adds	r3, r7, #4
 8004bec:	3304      	adds	r3, #4
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	61fb      	str	r3, [r7, #28]
}
 8004c08:	bf00      	nop
 8004c0a:	e7fe      	b.n	8004c0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c12:	6850      	ldr	r0, [r2, #4]
 8004c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c16:	6892      	ldr	r2, [r2, #8]
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f2c0 80aa 	blt.w	8004d78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	3304      	adds	r3, #4
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd fe53 	bl	80028e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c3a:	463b      	mov	r3, r7
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff6b 	bl	8004b18 <prvSampleTimeNow>
 8004c42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2b09      	cmp	r3, #9
 8004c48:	f200 8097 	bhi.w	8004d7a <prvProcessReceivedCommands+0x19e>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <prvProcessReceivedCommands+0x78>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c7d 	.word	0x08004c7d
 8004c5c:	08004c7d 	.word	0x08004c7d
 8004c60:	08004cf1 	.word	0x08004cf1
 8004c64:	08004d05 	.word	0x08004d05
 8004c68:	08004d4f 	.word	0x08004d4f
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c7d 	.word	0x08004c7d
 8004c74:	08004cf1 	.word	0x08004cf1
 8004c78:	08004d05 	.word	0x08004d05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c82:	f043 0301 	orr.w	r3, r3, #1
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	18d1      	adds	r1, r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c9c:	f7ff ff5c 	bl	8004b58 <prvInsertTimerInActiveList>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d069      	beq.n	8004d7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05e      	beq.n	8004d7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	441a      	add	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9300      	str	r3, [sp, #0]
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cce:	f7ff fe05 	bl	80048dc <xTimerGenericCommand>
 8004cd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d14f      	bne.n	8004d7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	61bb      	str	r3, [r7, #24]
}
 8004cec:	bf00      	nop
 8004cee:	e7fe      	b.n	8004cee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d02:	e03a      	b.n	8004d7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d0a:	f043 0301 	orr.w	r3, r3, #1
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10a      	bne.n	8004d3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	617b      	str	r3, [r7, #20]
}
 8004d36:	bf00      	nop
 8004d38:	e7fe      	b.n	8004d38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	18d1      	adds	r1, r2, r3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d48:	f7ff ff06 	bl	8004b58 <prvInsertTimerInActiveList>
					break;
 8004d4c:	e015      	b.n	8004d7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d5e:	f000 fbdf 	bl	8005520 <vPortFree>
 8004d62:	e00a      	b.n	8004d7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d76:	e000      	b.n	8004d7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <prvProcessReceivedCommands+0x1c0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	1d39      	adds	r1, r7, #4
 8004d80:	2200      	movs	r2, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe f964 	bl	8003050 <xQueueReceive>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f47f af2a 	bne.w	8004be4 <prvProcessReceivedCommands+0x8>
	}
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3730      	adds	r7, #48	; 0x30
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000c80 	.word	0x20000c80

08004da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b088      	sub	sp, #32
 8004da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004da6:	e048      	b.n	8004e3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004da8:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <prvSwitchTimerLists+0xc0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <prvSwitchTimerLists+0xc0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fd fd8d 	bl	80028e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d02e      	beq.n	8004e3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d90e      	bls.n	8004e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dfa:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <prvSwitchTimerLists+0xc0>)
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3304      	adds	r3, #4
 8004e02:	4619      	mov	r1, r3
 8004e04:	4610      	mov	r0, r2
 8004e06:	f7fd fd32 	bl	800286e <vListInsert>
 8004e0a:	e016      	b.n	8004e3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	2100      	movs	r1, #0
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff fd60 	bl	80048dc <xTimerGenericCommand>
 8004e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	603b      	str	r3, [r7, #0]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <prvSwitchTimerLists+0xc0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1b1      	bne.n	8004da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <prvSwitchTimerLists+0xc0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <prvSwitchTimerLists+0xc4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a04      	ldr	r2, [pc, #16]	; (8004e60 <prvSwitchTimerLists+0xc0>)
 8004e50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e52:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <prvSwitchTimerLists+0xc4>)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	6013      	str	r3, [r2, #0]
}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	20000c78 	.word	0x20000c78
 8004e64:	20000c7c 	.word	0x20000c7c

08004e68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e6e:	f000 f969 	bl	8005144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e72:	4b15      	ldr	r3, [pc, #84]	; (8004ec8 <prvCheckForValidListAndQueue+0x60>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d120      	bne.n	8004ebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e7a:	4814      	ldr	r0, [pc, #80]	; (8004ecc <prvCheckForValidListAndQueue+0x64>)
 8004e7c:	f7fd fca6 	bl	80027cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e80:	4813      	ldr	r0, [pc, #76]	; (8004ed0 <prvCheckForValidListAndQueue+0x68>)
 8004e82:	f7fd fca3 	bl	80027cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e86:	4b13      	ldr	r3, [pc, #76]	; (8004ed4 <prvCheckForValidListAndQueue+0x6c>)
 8004e88:	4a10      	ldr	r2, [pc, #64]	; (8004ecc <prvCheckForValidListAndQueue+0x64>)
 8004e8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e8c:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <prvCheckForValidListAndQueue+0x70>)
 8004e8e:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <prvCheckForValidListAndQueue+0x68>)
 8004e90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4b11      	ldr	r3, [pc, #68]	; (8004edc <prvCheckForValidListAndQueue+0x74>)
 8004e98:	4a11      	ldr	r2, [pc, #68]	; (8004ee0 <prvCheckForValidListAndQueue+0x78>)
 8004e9a:	2110      	movs	r1, #16
 8004e9c:	200a      	movs	r0, #10
 8004e9e:	f7fd fdb1 	bl	8002a04 <xQueueGenericCreateStatic>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4a08      	ldr	r2, [pc, #32]	; (8004ec8 <prvCheckForValidListAndQueue+0x60>)
 8004ea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <prvCheckForValidListAndQueue+0x60>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d005      	beq.n	8004ebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004eb0:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <prvCheckForValidListAndQueue+0x60>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	490b      	ldr	r1, [pc, #44]	; (8004ee4 <prvCheckForValidListAndQueue+0x7c>)
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fc5e 	bl	8003778 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ebc:	f000 f972 	bl	80051a4 <vPortExitCritical>
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	20000c80 	.word	0x20000c80
 8004ecc:	20000c50 	.word	0x20000c50
 8004ed0:	20000c64 	.word	0x20000c64
 8004ed4:	20000c78 	.word	0x20000c78
 8004ed8:	20000c7c 	.word	0x20000c7c
 8004edc:	20000d2c 	.word	0x20000d2c
 8004ee0:	20000c8c 	.word	0x20000c8c
 8004ee4:	080060b0 	.word	0x080060b0

08004ee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3b04      	subs	r3, #4
 8004f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f023 0201 	bic.w	r2, r3, #1
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b04      	subs	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f18:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <pxPortInitialiseStack+0x64>)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b14      	subs	r3, #20
 8004f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3b04      	subs	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f06f 0202 	mvn.w	r2, #2
 8004f36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3b20      	subs	r3, #32
 8004f3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3714      	adds	r7, #20
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	08004f51 	.word	0x08004f51

08004f50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f56:	2300      	movs	r3, #0
 8004f58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <prvTaskExitError+0x54>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f62:	d00a      	beq.n	8004f7a <prvTaskExitError+0x2a>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60fb      	str	r3, [r7, #12]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <prvTaskExitError+0x28>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	60bb      	str	r3, [r7, #8]
}
 8004f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f8e:	bf00      	nop
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0fc      	beq.n	8004f90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	2000000c 	.word	0x2000000c
	...

08004fb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fb0:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <pxCurrentTCBConst2>)
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	6808      	ldr	r0, [r1, #0]
 8004fb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	f380 8809 	msr	PSP, r0
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f04f 0000 	mov.w	r0, #0
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	4770      	bx	lr
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst2>:
 8004fd0:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fd8:	4808      	ldr	r0, [pc, #32]	; (8004ffc <prvPortStartFirstTask+0x24>)
 8004fda:	6800      	ldr	r0, [r0, #0]
 8004fdc:	6800      	ldr	r0, [r0, #0]
 8004fde:	f380 8808 	msr	MSP, r0
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f380 8814 	msr	CONTROL, r0
 8004fea:	b662      	cpsie	i
 8004fec:	b661      	cpsie	f
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	df00      	svc	0
 8004ff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ffa:	bf00      	nop
 8004ffc:	e000ed08 	.word	0xe000ed08

08005000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005006:	4b46      	ldr	r3, [pc, #280]	; (8005120 <xPortStartScheduler+0x120>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a46      	ldr	r2, [pc, #280]	; (8005124 <xPortStartScheduler+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10a      	bne.n	8005026 <xPortStartScheduler+0x26>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	613b      	str	r3, [r7, #16]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005026:	4b3e      	ldr	r3, [pc, #248]	; (8005120 <xPortStartScheduler+0x120>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a3f      	ldr	r2, [pc, #252]	; (8005128 <xPortStartScheduler+0x128>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10a      	bne.n	8005046 <xPortStartScheduler+0x46>
	__asm volatile
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60fb      	str	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	e7fe      	b.n	8005044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005046:	4b39      	ldr	r3, [pc, #228]	; (800512c <xPortStartScheduler+0x12c>)
 8005048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	22ff      	movs	r2, #255	; 0xff
 8005056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005068:	b2da      	uxtb	r2, r3
 800506a:	4b31      	ldr	r3, [pc, #196]	; (8005130 <xPortStartScheduler+0x130>)
 800506c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800506e:	4b31      	ldr	r3, [pc, #196]	; (8005134 <xPortStartScheduler+0x134>)
 8005070:	2207      	movs	r2, #7
 8005072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005074:	e009      	b.n	800508a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005076:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <xPortStartScheduler+0x134>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3b01      	subs	r3, #1
 800507c:	4a2d      	ldr	r2, [pc, #180]	; (8005134 <xPortStartScheduler+0x134>)
 800507e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005080:	78fb      	ldrb	r3, [r7, #3]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b80      	cmp	r3, #128	; 0x80
 8005094:	d0ef      	beq.n	8005076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <xPortStartScheduler+0x134>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f1c3 0307 	rsb	r3, r3, #7
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00a      	beq.n	80050b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	60bb      	str	r3, [r7, #8]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050b8:	4b1e      	ldr	r3, [pc, #120]	; (8005134 <xPortStartScheduler+0x134>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	4a1d      	ldr	r2, [pc, #116]	; (8005134 <xPortStartScheduler+0x134>)
 80050c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050c2:	4b1c      	ldr	r3, [pc, #112]	; (8005134 <xPortStartScheduler+0x134>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ca:	4a1a      	ldr	r2, [pc, #104]	; (8005134 <xPortStartScheduler+0x134>)
 80050cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <xPortStartScheduler+0x138>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a17      	ldr	r2, [pc, #92]	; (8005138 <xPortStartScheduler+0x138>)
 80050dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050e2:	4b15      	ldr	r3, [pc, #84]	; (8005138 <xPortStartScheduler+0x138>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a14      	ldr	r2, [pc, #80]	; (8005138 <xPortStartScheduler+0x138>)
 80050e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050ee:	f000 f8dd 	bl	80052ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050f2:	4b12      	ldr	r3, [pc, #72]	; (800513c <xPortStartScheduler+0x13c>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050f8:	f000 f8fc 	bl	80052f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050fc:	4b10      	ldr	r3, [pc, #64]	; (8005140 <xPortStartScheduler+0x140>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0f      	ldr	r2, [pc, #60]	; (8005140 <xPortStartScheduler+0x140>)
 8005102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005108:	f7ff ff66 	bl	8004fd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800510c:	f7fe ff44 	bl	8003f98 <vTaskSwitchContext>
	prvTaskExitError();
 8005110:	f7ff ff1e 	bl	8004f50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000ed00 	.word	0xe000ed00
 8005124:	410fc271 	.word	0x410fc271
 8005128:	410fc270 	.word	0x410fc270
 800512c:	e000e400 	.word	0xe000e400
 8005130:	20000d7c 	.word	0x20000d7c
 8005134:	20000d80 	.word	0x20000d80
 8005138:	e000ed20 	.word	0xe000ed20
 800513c:	2000000c 	.word	0x2000000c
 8005140:	e000ef34 	.word	0xe000ef34

08005144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	607b      	str	r3, [r7, #4]
}
 800515c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <vPortEnterCritical+0x58>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	4a0d      	ldr	r2, [pc, #52]	; (800519c <vPortEnterCritical+0x58>)
 8005166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <vPortEnterCritical+0x58>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d10f      	bne.n	8005190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005170:	4b0b      	ldr	r3, [pc, #44]	; (80051a0 <vPortEnterCritical+0x5c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <vPortEnterCritical+0x4c>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	603b      	str	r3, [r7, #0]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vPortEnterCritical+0x4a>
	}
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	2000000c 	.word	0x2000000c
 80051a0:	e000ed04 	.word	0xe000ed04

080051a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051aa:	4b12      	ldr	r3, [pc, #72]	; (80051f4 <vPortExitCritical+0x50>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <vPortExitCritical+0x24>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	607b      	str	r3, [r7, #4]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <vPortExitCritical+0x50>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4a09      	ldr	r2, [pc, #36]	; (80051f4 <vPortExitCritical+0x50>)
 80051d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d2:	4b08      	ldr	r3, [pc, #32]	; (80051f4 <vPortExitCritical+0x50>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <vPortExitCritical+0x42>
 80051da:	2300      	movs	r3, #0
 80051dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	f383 8811 	msr	BASEPRI, r3
}
 80051e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000000c 	.word	0x2000000c
	...

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005224:	f380 8811 	msr	BASEPRI, r0
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f7fe feb2 	bl	8003f98 <vTaskSwitchContext>
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f380 8811 	msr	BASEPRI, r0
 800523c:	bc09      	pop	{r0, r3}
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f01e 0f10 	tst.w	lr, #16
 800524a:	bf08      	it	eq
 800524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005250:	f380 8809 	msr	PSP, r0
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst>:
 8005260:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
}
 8005280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005282:	f7fe fdcf 	bl	8003e24 <xTaskIncrementTick>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800528c:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <xPortSysTickHandler+0x40>)
 800528e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f383 8811 	msr	BASEPRI, r3
}
 800529e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80052a0:	bf00      	nop
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	e000ed04 	.word	0xe000ed04

080052ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052b0:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b6:	4b0b      	ldr	r3, [pc, #44]	; (80052e4 <vPortSetupTimerInterrupt+0x38>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <vPortSetupTimerInterrupt+0x3c>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <vPortSetupTimerInterrupt+0x40>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <vPortSetupTimerInterrupt+0x44>)
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ce:	4b04      	ldr	r3, [pc, #16]	; (80052e0 <vPortSetupTimerInterrupt+0x34>)
 80052d0:	2207      	movs	r2, #7
 80052d2:	601a      	str	r2, [r3, #0]
}
 80052d4:	bf00      	nop
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	e000e010 	.word	0xe000e010
 80052e4:	e000e018 	.word	0xe000e018
 80052e8:	20000000 	.word	0x20000000
 80052ec:	10624dd3 	.word	0x10624dd3
 80052f0:	e000e014 	.word	0xe000e014

080052f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005304 <vPortEnableVFP+0x10>
 80052f8:	6801      	ldr	r1, [r0, #0]
 80052fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052fe:	6001      	str	r1, [r0, #0]
 8005300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005302:	bf00      	nop
 8005304:	e000ed88 	.word	0xe000ed88

08005308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800530e:	f3ef 8305 	mrs	r3, IPSR
 8005312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d914      	bls.n	8005344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800531a:	4a17      	ldr	r2, [pc, #92]	; (8005378 <vPortValidateInterruptPriority+0x70>)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005324:	4b15      	ldr	r3, [pc, #84]	; (800537c <vPortValidateInterruptPriority+0x74>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	7afa      	ldrb	r2, [r7, #11]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20a      	bcs.n	8005344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005344:	4b0e      	ldr	r3, [pc, #56]	; (8005380 <vPortValidateInterruptPriority+0x78>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800534c:	4b0d      	ldr	r3, [pc, #52]	; (8005384 <vPortValidateInterruptPriority+0x7c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d90a      	bls.n	800536a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	603b      	str	r3, [r7, #0]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <vPortValidateInterruptPriority+0x60>
	}
 800536a:	bf00      	nop
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	e000e3f0 	.word	0xe000e3f0
 800537c:	20000d7c 	.word	0x20000d7c
 8005380:	e000ed0c 	.word	0xe000ed0c
 8005384:	20000d80 	.word	0x20000d80

08005388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005394:	f7fe fc8a 	bl	8003cac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005398:	4b5b      	ldr	r3, [pc, #364]	; (8005508 <pvPortMalloc+0x180>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053a0:	f000 f920 	bl	80055e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <pvPortMalloc+0x184>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 8093 	bne.w	80054d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01d      	beq.n	80053f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053b8:	2208      	movs	r2, #8
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f023 0307 	bic.w	r3, r3, #7
 80053d0:	3308      	adds	r3, #8
 80053d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00a      	beq.n	80053f4 <pvPortMalloc+0x6c>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	617b      	str	r3, [r7, #20]
}
 80053f0:	bf00      	nop
 80053f2:	e7fe      	b.n	80053f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d06e      	beq.n	80054d8 <pvPortMalloc+0x150>
 80053fa:	4b45      	ldr	r3, [pc, #276]	; (8005510 <pvPortMalloc+0x188>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	429a      	cmp	r2, r3
 8005402:	d869      	bhi.n	80054d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005404:	4b43      	ldr	r3, [pc, #268]	; (8005514 <pvPortMalloc+0x18c>)
 8005406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005408:	4b42      	ldr	r3, [pc, #264]	; (8005514 <pvPortMalloc+0x18c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540e:	e004      	b.n	800541a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	429a      	cmp	r2, r3
 8005422:	d903      	bls.n	800542c <pvPortMalloc+0xa4>
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f1      	bne.n	8005410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800542c:	4b36      	ldr	r3, [pc, #216]	; (8005508 <pvPortMalloc+0x180>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	429a      	cmp	r2, r3
 8005434:	d050      	beq.n	80054d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2208      	movs	r2, #8
 800543c:	4413      	add	r3, r2
 800543e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	2308      	movs	r3, #8
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	429a      	cmp	r2, r3
 8005456:	d91f      	bls.n	8005498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4413      	add	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <pvPortMalloc+0xf8>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	613b      	str	r3, [r7, #16]
}
 800547c:	bf00      	nop
 800547e:	e7fe      	b.n	800547e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	1ad2      	subs	r2, r2, r3
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f000 f908 	bl	80056a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005498:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <pvPortMalloc+0x188>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	4a1b      	ldr	r2, [pc, #108]	; (8005510 <pvPortMalloc+0x188>)
 80054a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <pvPortMalloc+0x188>)
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b1b      	ldr	r3, [pc, #108]	; (8005518 <pvPortMalloc+0x190>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d203      	bcs.n	80054ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054b2:	4b17      	ldr	r3, [pc, #92]	; (8005510 <pvPortMalloc+0x188>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a18      	ldr	r2, [pc, #96]	; (8005518 <pvPortMalloc+0x190>)
 80054b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	4b13      	ldr	r3, [pc, #76]	; (800550c <pvPortMalloc+0x184>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054ce:	4b13      	ldr	r3, [pc, #76]	; (800551c <pvPortMalloc+0x194>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3301      	adds	r3, #1
 80054d4:	4a11      	ldr	r2, [pc, #68]	; (800551c <pvPortMalloc+0x194>)
 80054d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054d8:	f7fe fbf6 	bl	8003cc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <pvPortMalloc+0x174>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <pvPortMalloc+0x172>
	return pvReturn;
 80054fc:	69fb      	ldr	r3, [r7, #28]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	2000498c 	.word	0x2000498c
 800550c:	200049a0 	.word	0x200049a0
 8005510:	20004990 	.word	0x20004990
 8005514:	20004984 	.word	0x20004984
 8005518:	20004994 	.word	0x20004994
 800551c:	20004998 	.word	0x20004998

08005520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d04d      	beq.n	80055ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005532:	2308      	movs	r3, #8
 8005534:	425b      	negs	r3, r3
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <vPortFree+0xb8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4013      	ands	r3, r2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d10a      	bne.n	8005564 <vPortFree+0x44>
	__asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60fb      	str	r3, [r7, #12]
}
 8005560:	bf00      	nop
 8005562:	e7fe      	b.n	8005562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <vPortFree+0x62>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	60bb      	str	r3, [r7, #8]
}
 800557e:	bf00      	nop
 8005580:	e7fe      	b.n	8005580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <vPortFree+0xb8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4013      	ands	r3, r2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11a      	bne.n	80055ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <vPortFree+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	43db      	mvns	r3, r3
 80055a2:	401a      	ands	r2, r3
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a8:	f7fe fb80 	bl	8003cac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	685a      	ldr	r2, [r3, #4]
 80055b0:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <vPortFree+0xbc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4413      	add	r3, r2
 80055b6:	4a09      	ldr	r2, [pc, #36]	; (80055dc <vPortFree+0xbc>)
 80055b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055ba:	6938      	ldr	r0, [r7, #16]
 80055bc:	f000 f874 	bl	80056a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055c0:	4b07      	ldr	r3, [pc, #28]	; (80055e0 <vPortFree+0xc0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a06      	ldr	r2, [pc, #24]	; (80055e0 <vPortFree+0xc0>)
 80055c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055ca:	f7fe fb7d 	bl	8003cc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055ce:	bf00      	nop
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	200049a0 	.word	0x200049a0
 80055dc:	20004990 	.word	0x20004990
 80055e0:	2000499c 	.word	0x2000499c

080055e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <prvHeapInit+0xac>)
 80055f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	3307      	adds	r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0307 	bic.w	r3, r3, #7
 800560a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	4a1f      	ldr	r2, [pc, #124]	; (8005690 <prvHeapInit+0xac>)
 8005614:	4413      	add	r3, r2
 8005616:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800561c:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <prvHeapInit+0xb0>)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <prvHeapInit+0xb0>)
 8005624:	2200      	movs	r2, #0
 8005626:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005630:	2208      	movs	r2, #8
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0307 	bic.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <prvHeapInit+0xb4>)
 8005644:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <prvHeapInit+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800564e:	4b12      	ldr	r3, [pc, #72]	; (8005698 <prvHeapInit+0xb4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	1ad2      	subs	r2, r2, r3
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005664:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <prvHeapInit+0xb4>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a0a      	ldr	r2, [pc, #40]	; (800569c <prvHeapInit+0xb8>)
 8005672:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	4a09      	ldr	r2, [pc, #36]	; (80056a0 <prvHeapInit+0xbc>)
 800567a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800567c:	4b09      	ldr	r3, [pc, #36]	; (80056a4 <prvHeapInit+0xc0>)
 800567e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005682:	601a      	str	r2, [r3, #0]
}
 8005684:	bf00      	nop
 8005686:	3714      	adds	r7, #20
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	20000d84 	.word	0x20000d84
 8005694:	20004984 	.word	0x20004984
 8005698:	2000498c 	.word	0x2000498c
 800569c:	20004994 	.word	0x20004994
 80056a0:	20004990 	.word	0x20004990
 80056a4:	200049a0 	.word	0x200049a0

080056a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056b0:	4b28      	ldr	r3, [pc, #160]	; (8005754 <prvInsertBlockIntoFreeList+0xac>)
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	e002      	b.n	80056bc <prvInsertBlockIntoFreeList+0x14>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d8f7      	bhi.n	80056b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	4413      	add	r3, r2
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d108      	bne.n	80056ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	441a      	add	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	441a      	add	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d118      	bne.n	8005730 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d00d      	beq.n	8005726 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685a      	ldr	r2, [r3, #4]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	441a      	add	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	e008      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005726:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <prvInsertBlockIntoFreeList+0xb0>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	e003      	b.n	8005738 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	429a      	cmp	r2, r3
 800573e:	d002      	beq.n	8005746 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005746:	bf00      	nop
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20004984 	.word	0x20004984
 8005758:	2000498c 	.word	0x2000498c

0800575c <__errno>:
 800575c:	4b01      	ldr	r3, [pc, #4]	; (8005764 <__errno+0x8>)
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000010 	.word	0x20000010

08005768 <__libc_init_array>:
 8005768:	b570      	push	{r4, r5, r6, lr}
 800576a:	4d0d      	ldr	r5, [pc, #52]	; (80057a0 <__libc_init_array+0x38>)
 800576c:	4c0d      	ldr	r4, [pc, #52]	; (80057a4 <__libc_init_array+0x3c>)
 800576e:	1b64      	subs	r4, r4, r5
 8005770:	10a4      	asrs	r4, r4, #2
 8005772:	2600      	movs	r6, #0
 8005774:	42a6      	cmp	r6, r4
 8005776:	d109      	bne.n	800578c <__libc_init_array+0x24>
 8005778:	4d0b      	ldr	r5, [pc, #44]	; (80057a8 <__libc_init_array+0x40>)
 800577a:	4c0c      	ldr	r4, [pc, #48]	; (80057ac <__libc_init_array+0x44>)
 800577c:	f000 fc4e 	bl	800601c <_init>
 8005780:	1b64      	subs	r4, r4, r5
 8005782:	10a4      	asrs	r4, r4, #2
 8005784:	2600      	movs	r6, #0
 8005786:	42a6      	cmp	r6, r4
 8005788:	d105      	bne.n	8005796 <__libc_init_array+0x2e>
 800578a:	bd70      	pop	{r4, r5, r6, pc}
 800578c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005790:	4798      	blx	r3
 8005792:	3601      	adds	r6, #1
 8005794:	e7ee      	b.n	8005774 <__libc_init_array+0xc>
 8005796:	f855 3b04 	ldr.w	r3, [r5], #4
 800579a:	4798      	blx	r3
 800579c:	3601      	adds	r6, #1
 800579e:	e7f2      	b.n	8005786 <__libc_init_array+0x1e>
 80057a0:	080061e8 	.word	0x080061e8
 80057a4:	080061e8 	.word	0x080061e8
 80057a8:	080061e8 	.word	0x080061e8
 80057ac:	080061ec 	.word	0x080061ec

080057b0 <memcpy>:
 80057b0:	440a      	add	r2, r1
 80057b2:	4291      	cmp	r1, r2
 80057b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057b8:	d100      	bne.n	80057bc <memcpy+0xc>
 80057ba:	4770      	bx	lr
 80057bc:	b510      	push	{r4, lr}
 80057be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057c6:	4291      	cmp	r1, r2
 80057c8:	d1f9      	bne.n	80057be <memcpy+0xe>
 80057ca:	bd10      	pop	{r4, pc}

080057cc <memset>:
 80057cc:	4402      	add	r2, r0
 80057ce:	4603      	mov	r3, r0
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d100      	bne.n	80057d6 <memset+0xa>
 80057d4:	4770      	bx	lr
 80057d6:	f803 1b01 	strb.w	r1, [r3], #1
 80057da:	e7f9      	b.n	80057d0 <memset+0x4>

080057dc <_vsiprintf_r>:
 80057dc:	b500      	push	{lr}
 80057de:	b09b      	sub	sp, #108	; 0x6c
 80057e0:	9100      	str	r1, [sp, #0]
 80057e2:	9104      	str	r1, [sp, #16]
 80057e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057e8:	9105      	str	r1, [sp, #20]
 80057ea:	9102      	str	r1, [sp, #8]
 80057ec:	4905      	ldr	r1, [pc, #20]	; (8005804 <_vsiprintf_r+0x28>)
 80057ee:	9103      	str	r1, [sp, #12]
 80057f0:	4669      	mov	r1, sp
 80057f2:	f000 f86f 	bl	80058d4 <_svfiprintf_r>
 80057f6:	9b00      	ldr	r3, [sp, #0]
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	b01b      	add	sp, #108	; 0x6c
 80057fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8005802:	bf00      	nop
 8005804:	ffff0208 	.word	0xffff0208

08005808 <vsiprintf>:
 8005808:	4613      	mov	r3, r2
 800580a:	460a      	mov	r2, r1
 800580c:	4601      	mov	r1, r0
 800580e:	4802      	ldr	r0, [pc, #8]	; (8005818 <vsiprintf+0x10>)
 8005810:	6800      	ldr	r0, [r0, #0]
 8005812:	f7ff bfe3 	b.w	80057dc <_vsiprintf_r>
 8005816:	bf00      	nop
 8005818:	20000010 	.word	0x20000010

0800581c <__ssputs_r>:
 800581c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	688e      	ldr	r6, [r1, #8]
 8005822:	429e      	cmp	r6, r3
 8005824:	4682      	mov	sl, r0
 8005826:	460c      	mov	r4, r1
 8005828:	4690      	mov	r8, r2
 800582a:	461f      	mov	r7, r3
 800582c:	d838      	bhi.n	80058a0 <__ssputs_r+0x84>
 800582e:	898a      	ldrh	r2, [r1, #12]
 8005830:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005834:	d032      	beq.n	800589c <__ssputs_r+0x80>
 8005836:	6825      	ldr	r5, [r4, #0]
 8005838:	6909      	ldr	r1, [r1, #16]
 800583a:	eba5 0901 	sub.w	r9, r5, r1
 800583e:	6965      	ldr	r5, [r4, #20]
 8005840:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005844:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005848:	3301      	adds	r3, #1
 800584a:	444b      	add	r3, r9
 800584c:	106d      	asrs	r5, r5, #1
 800584e:	429d      	cmp	r5, r3
 8005850:	bf38      	it	cc
 8005852:	461d      	movcc	r5, r3
 8005854:	0553      	lsls	r3, r2, #21
 8005856:	d531      	bpl.n	80058bc <__ssputs_r+0xa0>
 8005858:	4629      	mov	r1, r5
 800585a:	f000 fb39 	bl	8005ed0 <_malloc_r>
 800585e:	4606      	mov	r6, r0
 8005860:	b950      	cbnz	r0, 8005878 <__ssputs_r+0x5c>
 8005862:	230c      	movs	r3, #12
 8005864:	f8ca 3000 	str.w	r3, [sl]
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800586e:	81a3      	strh	r3, [r4, #12]
 8005870:	f04f 30ff 	mov.w	r0, #4294967295
 8005874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005878:	6921      	ldr	r1, [r4, #16]
 800587a:	464a      	mov	r2, r9
 800587c:	f7ff ff98 	bl	80057b0 <memcpy>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	6126      	str	r6, [r4, #16]
 800588e:	6165      	str	r5, [r4, #20]
 8005890:	444e      	add	r6, r9
 8005892:	eba5 0509 	sub.w	r5, r5, r9
 8005896:	6026      	str	r6, [r4, #0]
 8005898:	60a5      	str	r5, [r4, #8]
 800589a:	463e      	mov	r6, r7
 800589c:	42be      	cmp	r6, r7
 800589e:	d900      	bls.n	80058a2 <__ssputs_r+0x86>
 80058a0:	463e      	mov	r6, r7
 80058a2:	4632      	mov	r2, r6
 80058a4:	6820      	ldr	r0, [r4, #0]
 80058a6:	4641      	mov	r1, r8
 80058a8:	f000 faa8 	bl	8005dfc <memmove>
 80058ac:	68a3      	ldr	r3, [r4, #8]
 80058ae:	6822      	ldr	r2, [r4, #0]
 80058b0:	1b9b      	subs	r3, r3, r6
 80058b2:	4432      	add	r2, r6
 80058b4:	60a3      	str	r3, [r4, #8]
 80058b6:	6022      	str	r2, [r4, #0]
 80058b8:	2000      	movs	r0, #0
 80058ba:	e7db      	b.n	8005874 <__ssputs_r+0x58>
 80058bc:	462a      	mov	r2, r5
 80058be:	f000 fb61 	bl	8005f84 <_realloc_r>
 80058c2:	4606      	mov	r6, r0
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d1e1      	bne.n	800588c <__ssputs_r+0x70>
 80058c8:	6921      	ldr	r1, [r4, #16]
 80058ca:	4650      	mov	r0, sl
 80058cc:	f000 fab0 	bl	8005e30 <_free_r>
 80058d0:	e7c7      	b.n	8005862 <__ssputs_r+0x46>
	...

080058d4 <_svfiprintf_r>:
 80058d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d8:	4698      	mov	r8, r3
 80058da:	898b      	ldrh	r3, [r1, #12]
 80058dc:	061b      	lsls	r3, r3, #24
 80058de:	b09d      	sub	sp, #116	; 0x74
 80058e0:	4607      	mov	r7, r0
 80058e2:	460d      	mov	r5, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	d50e      	bpl.n	8005906 <_svfiprintf_r+0x32>
 80058e8:	690b      	ldr	r3, [r1, #16]
 80058ea:	b963      	cbnz	r3, 8005906 <_svfiprintf_r+0x32>
 80058ec:	2140      	movs	r1, #64	; 0x40
 80058ee:	f000 faef 	bl	8005ed0 <_malloc_r>
 80058f2:	6028      	str	r0, [r5, #0]
 80058f4:	6128      	str	r0, [r5, #16]
 80058f6:	b920      	cbnz	r0, 8005902 <_svfiprintf_r+0x2e>
 80058f8:	230c      	movs	r3, #12
 80058fa:	603b      	str	r3, [r7, #0]
 80058fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005900:	e0d1      	b.n	8005aa6 <_svfiprintf_r+0x1d2>
 8005902:	2340      	movs	r3, #64	; 0x40
 8005904:	616b      	str	r3, [r5, #20]
 8005906:	2300      	movs	r3, #0
 8005908:	9309      	str	r3, [sp, #36]	; 0x24
 800590a:	2320      	movs	r3, #32
 800590c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005910:	f8cd 800c 	str.w	r8, [sp, #12]
 8005914:	2330      	movs	r3, #48	; 0x30
 8005916:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ac0 <_svfiprintf_r+0x1ec>
 800591a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800591e:	f04f 0901 	mov.w	r9, #1
 8005922:	4623      	mov	r3, r4
 8005924:	469a      	mov	sl, r3
 8005926:	f813 2b01 	ldrb.w	r2, [r3], #1
 800592a:	b10a      	cbz	r2, 8005930 <_svfiprintf_r+0x5c>
 800592c:	2a25      	cmp	r2, #37	; 0x25
 800592e:	d1f9      	bne.n	8005924 <_svfiprintf_r+0x50>
 8005930:	ebba 0b04 	subs.w	fp, sl, r4
 8005934:	d00b      	beq.n	800594e <_svfiprintf_r+0x7a>
 8005936:	465b      	mov	r3, fp
 8005938:	4622      	mov	r2, r4
 800593a:	4629      	mov	r1, r5
 800593c:	4638      	mov	r0, r7
 800593e:	f7ff ff6d 	bl	800581c <__ssputs_r>
 8005942:	3001      	adds	r0, #1
 8005944:	f000 80aa 	beq.w	8005a9c <_svfiprintf_r+0x1c8>
 8005948:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800594a:	445a      	add	r2, fp
 800594c:	9209      	str	r2, [sp, #36]	; 0x24
 800594e:	f89a 3000 	ldrb.w	r3, [sl]
 8005952:	2b00      	cmp	r3, #0
 8005954:	f000 80a2 	beq.w	8005a9c <_svfiprintf_r+0x1c8>
 8005958:	2300      	movs	r3, #0
 800595a:	f04f 32ff 	mov.w	r2, #4294967295
 800595e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005962:	f10a 0a01 	add.w	sl, sl, #1
 8005966:	9304      	str	r3, [sp, #16]
 8005968:	9307      	str	r3, [sp, #28]
 800596a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800596e:	931a      	str	r3, [sp, #104]	; 0x68
 8005970:	4654      	mov	r4, sl
 8005972:	2205      	movs	r2, #5
 8005974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005978:	4851      	ldr	r0, [pc, #324]	; (8005ac0 <_svfiprintf_r+0x1ec>)
 800597a:	f7fa fc39 	bl	80001f0 <memchr>
 800597e:	9a04      	ldr	r2, [sp, #16]
 8005980:	b9d8      	cbnz	r0, 80059ba <_svfiprintf_r+0xe6>
 8005982:	06d0      	lsls	r0, r2, #27
 8005984:	bf44      	itt	mi
 8005986:	2320      	movmi	r3, #32
 8005988:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800598c:	0711      	lsls	r1, r2, #28
 800598e:	bf44      	itt	mi
 8005990:	232b      	movmi	r3, #43	; 0x2b
 8005992:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005996:	f89a 3000 	ldrb.w	r3, [sl]
 800599a:	2b2a      	cmp	r3, #42	; 0x2a
 800599c:	d015      	beq.n	80059ca <_svfiprintf_r+0xf6>
 800599e:	9a07      	ldr	r2, [sp, #28]
 80059a0:	4654      	mov	r4, sl
 80059a2:	2000      	movs	r0, #0
 80059a4:	f04f 0c0a 	mov.w	ip, #10
 80059a8:	4621      	mov	r1, r4
 80059aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ae:	3b30      	subs	r3, #48	; 0x30
 80059b0:	2b09      	cmp	r3, #9
 80059b2:	d94e      	bls.n	8005a52 <_svfiprintf_r+0x17e>
 80059b4:	b1b0      	cbz	r0, 80059e4 <_svfiprintf_r+0x110>
 80059b6:	9207      	str	r2, [sp, #28]
 80059b8:	e014      	b.n	80059e4 <_svfiprintf_r+0x110>
 80059ba:	eba0 0308 	sub.w	r3, r0, r8
 80059be:	fa09 f303 	lsl.w	r3, r9, r3
 80059c2:	4313      	orrs	r3, r2
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	46a2      	mov	sl, r4
 80059c8:	e7d2      	b.n	8005970 <_svfiprintf_r+0x9c>
 80059ca:	9b03      	ldr	r3, [sp, #12]
 80059cc:	1d19      	adds	r1, r3, #4
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	9103      	str	r1, [sp, #12]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bfbb      	ittet	lt
 80059d6:	425b      	neglt	r3, r3
 80059d8:	f042 0202 	orrlt.w	r2, r2, #2
 80059dc:	9307      	strge	r3, [sp, #28]
 80059de:	9307      	strlt	r3, [sp, #28]
 80059e0:	bfb8      	it	lt
 80059e2:	9204      	strlt	r2, [sp, #16]
 80059e4:	7823      	ldrb	r3, [r4, #0]
 80059e6:	2b2e      	cmp	r3, #46	; 0x2e
 80059e8:	d10c      	bne.n	8005a04 <_svfiprintf_r+0x130>
 80059ea:	7863      	ldrb	r3, [r4, #1]
 80059ec:	2b2a      	cmp	r3, #42	; 0x2a
 80059ee:	d135      	bne.n	8005a5c <_svfiprintf_r+0x188>
 80059f0:	9b03      	ldr	r3, [sp, #12]
 80059f2:	1d1a      	adds	r2, r3, #4
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	9203      	str	r2, [sp, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	bfb8      	it	lt
 80059fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a00:	3402      	adds	r4, #2
 8005a02:	9305      	str	r3, [sp, #20]
 8005a04:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ad0 <_svfiprintf_r+0x1fc>
 8005a08:	7821      	ldrb	r1, [r4, #0]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	4650      	mov	r0, sl
 8005a0e:	f7fa fbef 	bl	80001f0 <memchr>
 8005a12:	b140      	cbz	r0, 8005a26 <_svfiprintf_r+0x152>
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	eba0 000a 	sub.w	r0, r0, sl
 8005a1a:	fa03 f000 	lsl.w	r0, r3, r0
 8005a1e:	9b04      	ldr	r3, [sp, #16]
 8005a20:	4303      	orrs	r3, r0
 8005a22:	3401      	adds	r4, #1
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a2a:	4826      	ldr	r0, [pc, #152]	; (8005ac4 <_svfiprintf_r+0x1f0>)
 8005a2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a30:	2206      	movs	r2, #6
 8005a32:	f7fa fbdd 	bl	80001f0 <memchr>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d038      	beq.n	8005aac <_svfiprintf_r+0x1d8>
 8005a3a:	4b23      	ldr	r3, [pc, #140]	; (8005ac8 <_svfiprintf_r+0x1f4>)
 8005a3c:	bb1b      	cbnz	r3, 8005a86 <_svfiprintf_r+0x1b2>
 8005a3e:	9b03      	ldr	r3, [sp, #12]
 8005a40:	3307      	adds	r3, #7
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	3308      	adds	r3, #8
 8005a48:	9303      	str	r3, [sp, #12]
 8005a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4c:	4433      	add	r3, r6
 8005a4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a50:	e767      	b.n	8005922 <_svfiprintf_r+0x4e>
 8005a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a56:	460c      	mov	r4, r1
 8005a58:	2001      	movs	r0, #1
 8005a5a:	e7a5      	b.n	80059a8 <_svfiprintf_r+0xd4>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	3401      	adds	r4, #1
 8005a60:	9305      	str	r3, [sp, #20]
 8005a62:	4619      	mov	r1, r3
 8005a64:	f04f 0c0a 	mov.w	ip, #10
 8005a68:	4620      	mov	r0, r4
 8005a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a6e:	3a30      	subs	r2, #48	; 0x30
 8005a70:	2a09      	cmp	r2, #9
 8005a72:	d903      	bls.n	8005a7c <_svfiprintf_r+0x1a8>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d0c5      	beq.n	8005a04 <_svfiprintf_r+0x130>
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	e7c3      	b.n	8005a04 <_svfiprintf_r+0x130>
 8005a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a80:	4604      	mov	r4, r0
 8005a82:	2301      	movs	r3, #1
 8005a84:	e7f0      	b.n	8005a68 <_svfiprintf_r+0x194>
 8005a86:	ab03      	add	r3, sp, #12
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	462a      	mov	r2, r5
 8005a8c:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <_svfiprintf_r+0x1f8>)
 8005a8e:	a904      	add	r1, sp, #16
 8005a90:	4638      	mov	r0, r7
 8005a92:	f3af 8000 	nop.w
 8005a96:	1c42      	adds	r2, r0, #1
 8005a98:	4606      	mov	r6, r0
 8005a9a:	d1d6      	bne.n	8005a4a <_svfiprintf_r+0x176>
 8005a9c:	89ab      	ldrh	r3, [r5, #12]
 8005a9e:	065b      	lsls	r3, r3, #25
 8005aa0:	f53f af2c 	bmi.w	80058fc <_svfiprintf_r+0x28>
 8005aa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aa6:	b01d      	add	sp, #116	; 0x74
 8005aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aac:	ab03      	add	r3, sp, #12
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	4b06      	ldr	r3, [pc, #24]	; (8005acc <_svfiprintf_r+0x1f8>)
 8005ab4:	a904      	add	r1, sp, #16
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	f000 f87a 	bl	8005bb0 <_printf_i>
 8005abc:	e7eb      	b.n	8005a96 <_svfiprintf_r+0x1c2>
 8005abe:	bf00      	nop
 8005ac0:	080061ac 	.word	0x080061ac
 8005ac4:	080061b6 	.word	0x080061b6
 8005ac8:	00000000 	.word	0x00000000
 8005acc:	0800581d 	.word	0x0800581d
 8005ad0:	080061b2 	.word	0x080061b2

08005ad4 <_printf_common>:
 8005ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	4616      	mov	r6, r2
 8005ada:	4699      	mov	r9, r3
 8005adc:	688a      	ldr	r2, [r1, #8]
 8005ade:	690b      	ldr	r3, [r1, #16]
 8005ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	bfb8      	it	lt
 8005ae8:	4613      	movlt	r3, r2
 8005aea:	6033      	str	r3, [r6, #0]
 8005aec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005af0:	4607      	mov	r7, r0
 8005af2:	460c      	mov	r4, r1
 8005af4:	b10a      	cbz	r2, 8005afa <_printf_common+0x26>
 8005af6:	3301      	adds	r3, #1
 8005af8:	6033      	str	r3, [r6, #0]
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	0699      	lsls	r1, r3, #26
 8005afe:	bf42      	ittt	mi
 8005b00:	6833      	ldrmi	r3, [r6, #0]
 8005b02:	3302      	addmi	r3, #2
 8005b04:	6033      	strmi	r3, [r6, #0]
 8005b06:	6825      	ldr	r5, [r4, #0]
 8005b08:	f015 0506 	ands.w	r5, r5, #6
 8005b0c:	d106      	bne.n	8005b1c <_printf_common+0x48>
 8005b0e:	f104 0a19 	add.w	sl, r4, #25
 8005b12:	68e3      	ldr	r3, [r4, #12]
 8005b14:	6832      	ldr	r2, [r6, #0]
 8005b16:	1a9b      	subs	r3, r3, r2
 8005b18:	42ab      	cmp	r3, r5
 8005b1a:	dc26      	bgt.n	8005b6a <_printf_common+0x96>
 8005b1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b20:	1e13      	subs	r3, r2, #0
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	bf18      	it	ne
 8005b26:	2301      	movne	r3, #1
 8005b28:	0692      	lsls	r2, r2, #26
 8005b2a:	d42b      	bmi.n	8005b84 <_printf_common+0xb0>
 8005b2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b30:	4649      	mov	r1, r9
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d01e      	beq.n	8005b78 <_printf_common+0xa4>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	68e5      	ldr	r5, [r4, #12]
 8005b3e:	6832      	ldr	r2, [r6, #0]
 8005b40:	f003 0306 	and.w	r3, r3, #6
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	bf08      	it	eq
 8005b48:	1aad      	subeq	r5, r5, r2
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	6922      	ldr	r2, [r4, #16]
 8005b4e:	bf0c      	ite	eq
 8005b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b54:	2500      	movne	r5, #0
 8005b56:	4293      	cmp	r3, r2
 8005b58:	bfc4      	itt	gt
 8005b5a:	1a9b      	subgt	r3, r3, r2
 8005b5c:	18ed      	addgt	r5, r5, r3
 8005b5e:	2600      	movs	r6, #0
 8005b60:	341a      	adds	r4, #26
 8005b62:	42b5      	cmp	r5, r6
 8005b64:	d11a      	bne.n	8005b9c <_printf_common+0xc8>
 8005b66:	2000      	movs	r0, #0
 8005b68:	e008      	b.n	8005b7c <_printf_common+0xa8>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4652      	mov	r2, sl
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4638      	mov	r0, r7
 8005b72:	47c0      	blx	r8
 8005b74:	3001      	adds	r0, #1
 8005b76:	d103      	bne.n	8005b80 <_printf_common+0xac>
 8005b78:	f04f 30ff 	mov.w	r0, #4294967295
 8005b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b80:	3501      	adds	r5, #1
 8005b82:	e7c6      	b.n	8005b12 <_printf_common+0x3e>
 8005b84:	18e1      	adds	r1, r4, r3
 8005b86:	1c5a      	adds	r2, r3, #1
 8005b88:	2030      	movs	r0, #48	; 0x30
 8005b8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b8e:	4422      	add	r2, r4
 8005b90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b98:	3302      	adds	r3, #2
 8005b9a:	e7c7      	b.n	8005b2c <_printf_common+0x58>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4622      	mov	r2, r4
 8005ba0:	4649      	mov	r1, r9
 8005ba2:	4638      	mov	r0, r7
 8005ba4:	47c0      	blx	r8
 8005ba6:	3001      	adds	r0, #1
 8005ba8:	d0e6      	beq.n	8005b78 <_printf_common+0xa4>
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7d9      	b.n	8005b62 <_printf_common+0x8e>
	...

08005bb0 <_printf_i>:
 8005bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	4691      	mov	r9, r2
 8005bb8:	7e27      	ldrb	r7, [r4, #24]
 8005bba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bbc:	2f78      	cmp	r7, #120	; 0x78
 8005bbe:	4680      	mov	r8, r0
 8005bc0:	469a      	mov	sl, r3
 8005bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc6:	d807      	bhi.n	8005bd8 <_printf_i+0x28>
 8005bc8:	2f62      	cmp	r7, #98	; 0x62
 8005bca:	d80a      	bhi.n	8005be2 <_printf_i+0x32>
 8005bcc:	2f00      	cmp	r7, #0
 8005bce:	f000 80d8 	beq.w	8005d82 <_printf_i+0x1d2>
 8005bd2:	2f58      	cmp	r7, #88	; 0x58
 8005bd4:	f000 80a3 	beq.w	8005d1e <_printf_i+0x16e>
 8005bd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005be0:	e03a      	b.n	8005c58 <_printf_i+0xa8>
 8005be2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005be6:	2b15      	cmp	r3, #21
 8005be8:	d8f6      	bhi.n	8005bd8 <_printf_i+0x28>
 8005bea:	a001      	add	r0, pc, #4	; (adr r0, 8005bf0 <_printf_i+0x40>)
 8005bec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bf0:	08005c49 	.word	0x08005c49
 8005bf4:	08005c5d 	.word	0x08005c5d
 8005bf8:	08005bd9 	.word	0x08005bd9
 8005bfc:	08005bd9 	.word	0x08005bd9
 8005c00:	08005bd9 	.word	0x08005bd9
 8005c04:	08005bd9 	.word	0x08005bd9
 8005c08:	08005c5d 	.word	0x08005c5d
 8005c0c:	08005bd9 	.word	0x08005bd9
 8005c10:	08005bd9 	.word	0x08005bd9
 8005c14:	08005bd9 	.word	0x08005bd9
 8005c18:	08005bd9 	.word	0x08005bd9
 8005c1c:	08005d69 	.word	0x08005d69
 8005c20:	08005c8d 	.word	0x08005c8d
 8005c24:	08005d4b 	.word	0x08005d4b
 8005c28:	08005bd9 	.word	0x08005bd9
 8005c2c:	08005bd9 	.word	0x08005bd9
 8005c30:	08005d8b 	.word	0x08005d8b
 8005c34:	08005bd9 	.word	0x08005bd9
 8005c38:	08005c8d 	.word	0x08005c8d
 8005c3c:	08005bd9 	.word	0x08005bd9
 8005c40:	08005bd9 	.word	0x08005bd9
 8005c44:	08005d53 	.word	0x08005d53
 8005c48:	680b      	ldr	r3, [r1, #0]
 8005c4a:	1d1a      	adds	r2, r3, #4
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	600a      	str	r2, [r1, #0]
 8005c50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e0a3      	b.n	8005da4 <_printf_i+0x1f4>
 8005c5c:	6825      	ldr	r5, [r4, #0]
 8005c5e:	6808      	ldr	r0, [r1, #0]
 8005c60:	062e      	lsls	r6, r5, #24
 8005c62:	f100 0304 	add.w	r3, r0, #4
 8005c66:	d50a      	bpl.n	8005c7e <_printf_i+0xce>
 8005c68:	6805      	ldr	r5, [r0, #0]
 8005c6a:	600b      	str	r3, [r1, #0]
 8005c6c:	2d00      	cmp	r5, #0
 8005c6e:	da03      	bge.n	8005c78 <_printf_i+0xc8>
 8005c70:	232d      	movs	r3, #45	; 0x2d
 8005c72:	426d      	negs	r5, r5
 8005c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c78:	485e      	ldr	r0, [pc, #376]	; (8005df4 <_printf_i+0x244>)
 8005c7a:	230a      	movs	r3, #10
 8005c7c:	e019      	b.n	8005cb2 <_printf_i+0x102>
 8005c7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c82:	6805      	ldr	r5, [r0, #0]
 8005c84:	600b      	str	r3, [r1, #0]
 8005c86:	bf18      	it	ne
 8005c88:	b22d      	sxthne	r5, r5
 8005c8a:	e7ef      	b.n	8005c6c <_printf_i+0xbc>
 8005c8c:	680b      	ldr	r3, [r1, #0]
 8005c8e:	6825      	ldr	r5, [r4, #0]
 8005c90:	1d18      	adds	r0, r3, #4
 8005c92:	6008      	str	r0, [r1, #0]
 8005c94:	0628      	lsls	r0, r5, #24
 8005c96:	d501      	bpl.n	8005c9c <_printf_i+0xec>
 8005c98:	681d      	ldr	r5, [r3, #0]
 8005c9a:	e002      	b.n	8005ca2 <_printf_i+0xf2>
 8005c9c:	0669      	lsls	r1, r5, #25
 8005c9e:	d5fb      	bpl.n	8005c98 <_printf_i+0xe8>
 8005ca0:	881d      	ldrh	r5, [r3, #0]
 8005ca2:	4854      	ldr	r0, [pc, #336]	; (8005df4 <_printf_i+0x244>)
 8005ca4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ca6:	bf0c      	ite	eq
 8005ca8:	2308      	moveq	r3, #8
 8005caa:	230a      	movne	r3, #10
 8005cac:	2100      	movs	r1, #0
 8005cae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cb2:	6866      	ldr	r6, [r4, #4]
 8005cb4:	60a6      	str	r6, [r4, #8]
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	bfa2      	ittt	ge
 8005cba:	6821      	ldrge	r1, [r4, #0]
 8005cbc:	f021 0104 	bicge.w	r1, r1, #4
 8005cc0:	6021      	strge	r1, [r4, #0]
 8005cc2:	b90d      	cbnz	r5, 8005cc8 <_printf_i+0x118>
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	d04d      	beq.n	8005d64 <_printf_i+0x1b4>
 8005cc8:	4616      	mov	r6, r2
 8005cca:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cce:	fb03 5711 	mls	r7, r3, r1, r5
 8005cd2:	5dc7      	ldrb	r7, [r0, r7]
 8005cd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cd8:	462f      	mov	r7, r5
 8005cda:	42bb      	cmp	r3, r7
 8005cdc:	460d      	mov	r5, r1
 8005cde:	d9f4      	bls.n	8005cca <_printf_i+0x11a>
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d10b      	bne.n	8005cfc <_printf_i+0x14c>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	07df      	lsls	r7, r3, #31
 8005ce8:	d508      	bpl.n	8005cfc <_printf_i+0x14c>
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	6861      	ldr	r1, [r4, #4]
 8005cee:	4299      	cmp	r1, r3
 8005cf0:	bfde      	ittt	le
 8005cf2:	2330      	movle	r3, #48	; 0x30
 8005cf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cf8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cfc:	1b92      	subs	r2, r2, r6
 8005cfe:	6122      	str	r2, [r4, #16]
 8005d00:	f8cd a000 	str.w	sl, [sp]
 8005d04:	464b      	mov	r3, r9
 8005d06:	aa03      	add	r2, sp, #12
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f7ff fee2 	bl	8005ad4 <_printf_common>
 8005d10:	3001      	adds	r0, #1
 8005d12:	d14c      	bne.n	8005dae <_printf_i+0x1fe>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	b004      	add	sp, #16
 8005d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1e:	4835      	ldr	r0, [pc, #212]	; (8005df4 <_printf_i+0x244>)
 8005d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	680e      	ldr	r6, [r1, #0]
 8005d28:	061f      	lsls	r7, r3, #24
 8005d2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d2e:	600e      	str	r6, [r1, #0]
 8005d30:	d514      	bpl.n	8005d5c <_printf_i+0x1ac>
 8005d32:	07d9      	lsls	r1, r3, #31
 8005d34:	bf44      	itt	mi
 8005d36:	f043 0320 	orrmi.w	r3, r3, #32
 8005d3a:	6023      	strmi	r3, [r4, #0]
 8005d3c:	b91d      	cbnz	r5, 8005d46 <_printf_i+0x196>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	f023 0320 	bic.w	r3, r3, #32
 8005d44:	6023      	str	r3, [r4, #0]
 8005d46:	2310      	movs	r3, #16
 8005d48:	e7b0      	b.n	8005cac <_printf_i+0xfc>
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f043 0320 	orr.w	r3, r3, #32
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	2378      	movs	r3, #120	; 0x78
 8005d54:	4828      	ldr	r0, [pc, #160]	; (8005df8 <_printf_i+0x248>)
 8005d56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d5a:	e7e3      	b.n	8005d24 <_printf_i+0x174>
 8005d5c:	065e      	lsls	r6, r3, #25
 8005d5e:	bf48      	it	mi
 8005d60:	b2ad      	uxthmi	r5, r5
 8005d62:	e7e6      	b.n	8005d32 <_printf_i+0x182>
 8005d64:	4616      	mov	r6, r2
 8005d66:	e7bb      	b.n	8005ce0 <_printf_i+0x130>
 8005d68:	680b      	ldr	r3, [r1, #0]
 8005d6a:	6826      	ldr	r6, [r4, #0]
 8005d6c:	6960      	ldr	r0, [r4, #20]
 8005d6e:	1d1d      	adds	r5, r3, #4
 8005d70:	600d      	str	r5, [r1, #0]
 8005d72:	0635      	lsls	r5, r6, #24
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	d501      	bpl.n	8005d7c <_printf_i+0x1cc>
 8005d78:	6018      	str	r0, [r3, #0]
 8005d7a:	e002      	b.n	8005d82 <_printf_i+0x1d2>
 8005d7c:	0671      	lsls	r1, r6, #25
 8005d7e:	d5fb      	bpl.n	8005d78 <_printf_i+0x1c8>
 8005d80:	8018      	strh	r0, [r3, #0]
 8005d82:	2300      	movs	r3, #0
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	4616      	mov	r6, r2
 8005d88:	e7ba      	b.n	8005d00 <_printf_i+0x150>
 8005d8a:	680b      	ldr	r3, [r1, #0]
 8005d8c:	1d1a      	adds	r2, r3, #4
 8005d8e:	600a      	str	r2, [r1, #0]
 8005d90:	681e      	ldr	r6, [r3, #0]
 8005d92:	6862      	ldr	r2, [r4, #4]
 8005d94:	2100      	movs	r1, #0
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7fa fa2a 	bl	80001f0 <memchr>
 8005d9c:	b108      	cbz	r0, 8005da2 <_printf_i+0x1f2>
 8005d9e:	1b80      	subs	r0, r0, r6
 8005da0:	6060      	str	r0, [r4, #4]
 8005da2:	6863      	ldr	r3, [r4, #4]
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	2300      	movs	r3, #0
 8005da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dac:	e7a8      	b.n	8005d00 <_printf_i+0x150>
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	4632      	mov	r2, r6
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	47d0      	blx	sl
 8005db8:	3001      	adds	r0, #1
 8005dba:	d0ab      	beq.n	8005d14 <_printf_i+0x164>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	079b      	lsls	r3, r3, #30
 8005dc0:	d413      	bmi.n	8005dea <_printf_i+0x23a>
 8005dc2:	68e0      	ldr	r0, [r4, #12]
 8005dc4:	9b03      	ldr	r3, [sp, #12]
 8005dc6:	4298      	cmp	r0, r3
 8005dc8:	bfb8      	it	lt
 8005dca:	4618      	movlt	r0, r3
 8005dcc:	e7a4      	b.n	8005d18 <_printf_i+0x168>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4649      	mov	r1, r9
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	47d0      	blx	sl
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d09b      	beq.n	8005d14 <_printf_i+0x164>
 8005ddc:	3501      	adds	r5, #1
 8005dde:	68e3      	ldr	r3, [r4, #12]
 8005de0:	9903      	ldr	r1, [sp, #12]
 8005de2:	1a5b      	subs	r3, r3, r1
 8005de4:	42ab      	cmp	r3, r5
 8005de6:	dcf2      	bgt.n	8005dce <_printf_i+0x21e>
 8005de8:	e7eb      	b.n	8005dc2 <_printf_i+0x212>
 8005dea:	2500      	movs	r5, #0
 8005dec:	f104 0619 	add.w	r6, r4, #25
 8005df0:	e7f5      	b.n	8005dde <_printf_i+0x22e>
 8005df2:	bf00      	nop
 8005df4:	080061bd 	.word	0x080061bd
 8005df8:	080061ce 	.word	0x080061ce

08005dfc <memmove>:
 8005dfc:	4288      	cmp	r0, r1
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	eb01 0402 	add.w	r4, r1, r2
 8005e04:	d902      	bls.n	8005e0c <memmove+0x10>
 8005e06:	4284      	cmp	r4, r0
 8005e08:	4623      	mov	r3, r4
 8005e0a:	d807      	bhi.n	8005e1c <memmove+0x20>
 8005e0c:	1e43      	subs	r3, r0, #1
 8005e0e:	42a1      	cmp	r1, r4
 8005e10:	d008      	beq.n	8005e24 <memmove+0x28>
 8005e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e1a:	e7f8      	b.n	8005e0e <memmove+0x12>
 8005e1c:	4402      	add	r2, r0
 8005e1e:	4601      	mov	r1, r0
 8005e20:	428a      	cmp	r2, r1
 8005e22:	d100      	bne.n	8005e26 <memmove+0x2a>
 8005e24:	bd10      	pop	{r4, pc}
 8005e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e2e:	e7f7      	b.n	8005e20 <memmove+0x24>

08005e30 <_free_r>:
 8005e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e32:	2900      	cmp	r1, #0
 8005e34:	d048      	beq.n	8005ec8 <_free_r+0x98>
 8005e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e3a:	9001      	str	r0, [sp, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8005e42:	bfb8      	it	lt
 8005e44:	18e4      	addlt	r4, r4, r3
 8005e46:	f000 f8d3 	bl	8005ff0 <__malloc_lock>
 8005e4a:	4a20      	ldr	r2, [pc, #128]	; (8005ecc <_free_r+0x9c>)
 8005e4c:	9801      	ldr	r0, [sp, #4]
 8005e4e:	6813      	ldr	r3, [r2, #0]
 8005e50:	4615      	mov	r5, r2
 8005e52:	b933      	cbnz	r3, 8005e62 <_free_r+0x32>
 8005e54:	6063      	str	r3, [r4, #4]
 8005e56:	6014      	str	r4, [r2, #0]
 8005e58:	b003      	add	sp, #12
 8005e5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e5e:	f000 b8cd 	b.w	8005ffc <__malloc_unlock>
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	d90b      	bls.n	8005e7e <_free_r+0x4e>
 8005e66:	6821      	ldr	r1, [r4, #0]
 8005e68:	1862      	adds	r2, r4, r1
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	bf04      	itt	eq
 8005e6e:	681a      	ldreq	r2, [r3, #0]
 8005e70:	685b      	ldreq	r3, [r3, #4]
 8005e72:	6063      	str	r3, [r4, #4]
 8005e74:	bf04      	itt	eq
 8005e76:	1852      	addeq	r2, r2, r1
 8005e78:	6022      	streq	r2, [r4, #0]
 8005e7a:	602c      	str	r4, [r5, #0]
 8005e7c:	e7ec      	b.n	8005e58 <_free_r+0x28>
 8005e7e:	461a      	mov	r2, r3
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	b10b      	cbz	r3, 8005e88 <_free_r+0x58>
 8005e84:	42a3      	cmp	r3, r4
 8005e86:	d9fa      	bls.n	8005e7e <_free_r+0x4e>
 8005e88:	6811      	ldr	r1, [r2, #0]
 8005e8a:	1855      	adds	r5, r2, r1
 8005e8c:	42a5      	cmp	r5, r4
 8005e8e:	d10b      	bne.n	8005ea8 <_free_r+0x78>
 8005e90:	6824      	ldr	r4, [r4, #0]
 8005e92:	4421      	add	r1, r4
 8005e94:	1854      	adds	r4, r2, r1
 8005e96:	42a3      	cmp	r3, r4
 8005e98:	6011      	str	r1, [r2, #0]
 8005e9a:	d1dd      	bne.n	8005e58 <_free_r+0x28>
 8005e9c:	681c      	ldr	r4, [r3, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	6053      	str	r3, [r2, #4]
 8005ea2:	4421      	add	r1, r4
 8005ea4:	6011      	str	r1, [r2, #0]
 8005ea6:	e7d7      	b.n	8005e58 <_free_r+0x28>
 8005ea8:	d902      	bls.n	8005eb0 <_free_r+0x80>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	6003      	str	r3, [r0, #0]
 8005eae:	e7d3      	b.n	8005e58 <_free_r+0x28>
 8005eb0:	6825      	ldr	r5, [r4, #0]
 8005eb2:	1961      	adds	r1, r4, r5
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	bf04      	itt	eq
 8005eb8:	6819      	ldreq	r1, [r3, #0]
 8005eba:	685b      	ldreq	r3, [r3, #4]
 8005ebc:	6063      	str	r3, [r4, #4]
 8005ebe:	bf04      	itt	eq
 8005ec0:	1949      	addeq	r1, r1, r5
 8005ec2:	6021      	streq	r1, [r4, #0]
 8005ec4:	6054      	str	r4, [r2, #4]
 8005ec6:	e7c7      	b.n	8005e58 <_free_r+0x28>
 8005ec8:	b003      	add	sp, #12
 8005eca:	bd30      	pop	{r4, r5, pc}
 8005ecc:	200049a4 	.word	0x200049a4

08005ed0 <_malloc_r>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	1ccd      	adds	r5, r1, #3
 8005ed4:	f025 0503 	bic.w	r5, r5, #3
 8005ed8:	3508      	adds	r5, #8
 8005eda:	2d0c      	cmp	r5, #12
 8005edc:	bf38      	it	cc
 8005ede:	250c      	movcc	r5, #12
 8005ee0:	2d00      	cmp	r5, #0
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	db01      	blt.n	8005eea <_malloc_r+0x1a>
 8005ee6:	42a9      	cmp	r1, r5
 8005ee8:	d903      	bls.n	8005ef2 <_malloc_r+0x22>
 8005eea:	230c      	movs	r3, #12
 8005eec:	6033      	str	r3, [r6, #0]
 8005eee:	2000      	movs	r0, #0
 8005ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef2:	f000 f87d 	bl	8005ff0 <__malloc_lock>
 8005ef6:	4921      	ldr	r1, [pc, #132]	; (8005f7c <_malloc_r+0xac>)
 8005ef8:	680a      	ldr	r2, [r1, #0]
 8005efa:	4614      	mov	r4, r2
 8005efc:	b99c      	cbnz	r4, 8005f26 <_malloc_r+0x56>
 8005efe:	4f20      	ldr	r7, [pc, #128]	; (8005f80 <_malloc_r+0xb0>)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	b923      	cbnz	r3, 8005f0e <_malloc_r+0x3e>
 8005f04:	4621      	mov	r1, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f000 f862 	bl	8005fd0 <_sbrk_r>
 8005f0c:	6038      	str	r0, [r7, #0]
 8005f0e:	4629      	mov	r1, r5
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 f85d 	bl	8005fd0 <_sbrk_r>
 8005f16:	1c43      	adds	r3, r0, #1
 8005f18:	d123      	bne.n	8005f62 <_malloc_r+0x92>
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	6033      	str	r3, [r6, #0]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	f000 f86c 	bl	8005ffc <__malloc_unlock>
 8005f24:	e7e3      	b.n	8005eee <_malloc_r+0x1e>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	1b5b      	subs	r3, r3, r5
 8005f2a:	d417      	bmi.n	8005f5c <_malloc_r+0x8c>
 8005f2c:	2b0b      	cmp	r3, #11
 8005f2e:	d903      	bls.n	8005f38 <_malloc_r+0x68>
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	441c      	add	r4, r3
 8005f34:	6025      	str	r5, [r4, #0]
 8005f36:	e004      	b.n	8005f42 <_malloc_r+0x72>
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	42a2      	cmp	r2, r4
 8005f3c:	bf0c      	ite	eq
 8005f3e:	600b      	streq	r3, [r1, #0]
 8005f40:	6053      	strne	r3, [r2, #4]
 8005f42:	4630      	mov	r0, r6
 8005f44:	f000 f85a 	bl	8005ffc <__malloc_unlock>
 8005f48:	f104 000b 	add.w	r0, r4, #11
 8005f4c:	1d23      	adds	r3, r4, #4
 8005f4e:	f020 0007 	bic.w	r0, r0, #7
 8005f52:	1ac2      	subs	r2, r0, r3
 8005f54:	d0cc      	beq.n	8005ef0 <_malloc_r+0x20>
 8005f56:	1a1b      	subs	r3, r3, r0
 8005f58:	50a3      	str	r3, [r4, r2]
 8005f5a:	e7c9      	b.n	8005ef0 <_malloc_r+0x20>
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	6864      	ldr	r4, [r4, #4]
 8005f60:	e7cc      	b.n	8005efc <_malloc_r+0x2c>
 8005f62:	1cc4      	adds	r4, r0, #3
 8005f64:	f024 0403 	bic.w	r4, r4, #3
 8005f68:	42a0      	cmp	r0, r4
 8005f6a:	d0e3      	beq.n	8005f34 <_malloc_r+0x64>
 8005f6c:	1a21      	subs	r1, r4, r0
 8005f6e:	4630      	mov	r0, r6
 8005f70:	f000 f82e 	bl	8005fd0 <_sbrk_r>
 8005f74:	3001      	adds	r0, #1
 8005f76:	d1dd      	bne.n	8005f34 <_malloc_r+0x64>
 8005f78:	e7cf      	b.n	8005f1a <_malloc_r+0x4a>
 8005f7a:	bf00      	nop
 8005f7c:	200049a4 	.word	0x200049a4
 8005f80:	200049a8 	.word	0x200049a8

08005f84 <_realloc_r>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	4607      	mov	r7, r0
 8005f88:	4614      	mov	r4, r2
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	b921      	cbnz	r1, 8005f98 <_realloc_r+0x14>
 8005f8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f92:	4611      	mov	r1, r2
 8005f94:	f7ff bf9c 	b.w	8005ed0 <_malloc_r>
 8005f98:	b922      	cbnz	r2, 8005fa4 <_realloc_r+0x20>
 8005f9a:	f7ff ff49 	bl	8005e30 <_free_r>
 8005f9e:	4625      	mov	r5, r4
 8005fa0:	4628      	mov	r0, r5
 8005fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa4:	f000 f830 	bl	8006008 <_malloc_usable_size_r>
 8005fa8:	42a0      	cmp	r0, r4
 8005faa:	d20f      	bcs.n	8005fcc <_realloc_r+0x48>
 8005fac:	4621      	mov	r1, r4
 8005fae:	4638      	mov	r0, r7
 8005fb0:	f7ff ff8e 	bl	8005ed0 <_malloc_r>
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d0f2      	beq.n	8005fa0 <_realloc_r+0x1c>
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4622      	mov	r2, r4
 8005fbe:	f7ff fbf7 	bl	80057b0 <memcpy>
 8005fc2:	4631      	mov	r1, r6
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	f7ff ff33 	bl	8005e30 <_free_r>
 8005fca:	e7e9      	b.n	8005fa0 <_realloc_r+0x1c>
 8005fcc:	4635      	mov	r5, r6
 8005fce:	e7e7      	b.n	8005fa0 <_realloc_r+0x1c>

08005fd0 <_sbrk_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d06      	ldr	r5, [pc, #24]	; (8005fec <_sbrk_r+0x1c>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fa fd78 	bl	8000ad0 <_sbrk>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_sbrk_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_sbrk_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20004a54 	.word	0x20004a54

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f000 b811 	b.w	8006018 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20004a5c 	.word	0x20004a5c

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f000 b80c 	b.w	800601a <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	20004a5c 	.word	0x20004a5c

08006008 <_malloc_usable_size_r>:
 8006008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800600c:	1f18      	subs	r0, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	bfbc      	itt	lt
 8006012:	580b      	ldrlt	r3, [r1, r0]
 8006014:	18c0      	addlt	r0, r0, r3
 8006016:	4770      	bx	lr

08006018 <__retarget_lock_acquire_recursive>:
 8006018:	4770      	bx	lr

0800601a <__retarget_lock_release_recursive>:
 800601a:	4770      	bx	lr

0800601c <_init>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	bf00      	nop
 8006020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006022:	bc08      	pop	{r3}
 8006024:	469e      	mov	lr, r3
 8006026:	4770      	bx	lr

08006028 <_fini>:
 8006028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602a:	bf00      	nop
 800602c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602e:	bc08      	pop	{r3}
 8006030:	469e      	mov	lr, r3
 8006032:	4770      	bx	lr
