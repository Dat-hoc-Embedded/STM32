
10.RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006c8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000860  08000860  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000860  08000860  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000860  08000860  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000860  08000860  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000860  08000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000874  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000874  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002634  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e2  00000000  00000000  00022670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000318  00000000  00000000  00023058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  00023370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013f95  00000000  00000000  00023620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000324a  00000000  00000000  000375b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ea42  00000000  00000000  0003a7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b9241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a98  00000000  00000000  000b9294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000848 	.word	0x08000848

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08000848 	.word	0x08000848

080001d8 <LEDS_INIT>:
/*------------------- LEDs */
// LED on board is: PD12, PD13, PD14, PD15 đang ở trạng thái nối GND
#define GPIOD_BASE_ADDR 0x40020C00 // BASE ADDRESS GPIOD

// Function MODER INIT for LEDs
void LEDS_INIT(){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0

	uint32_t* GPIOD_MODER = GPIOD_BASE_ADDR + 0x00;
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <LEDS_INIT+0x54>)
 80001e0:	607b      	str	r3, [r7, #4]
	// Reset bit MODER of PD 12,13,14,15
	*GPIOD_MODER &= ~(0xFF << 24); // 0xFF = 0x1111 1111
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	601a      	str	r2, [r3, #0]

	// SET [01] cho MODE: OUTPUT
	*GPIOD_MODER |= (0b01 << 24); // LED GREEN bits [24:25]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 26); // LED ORANGE ...
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 28); // LED RED ...
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	601a      	str	r2, [r3, #0]
	*GPIOD_MODER |= (0b01 << 30); // LED BLUE ...
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40020c00 	.word	0x40020c00

08000230 <LEDS_CONTROL>:
typedef enum{
	OFF_LED,
	ON_LED
}led_state_t;

void LEDS_CONTROL(led_t led, led_state_t state){
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	460a      	mov	r2, r1
 800023a:	71fb      	strb	r3, [r7, #7]
 800023c:	4613      	mov	r3, r2
 800023e:	71bb      	strb	r3, [r7, #6]
	uint32_t *GPIOD_ODR = GPIOD_BASE_ADDR + 0x14;
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <LEDS_CONTROL+0x54>)
 8000242:	60fb      	str	r3, [r7, #12]
	if (state == ON_LED)
 8000244:	79bb      	ldrb	r3, [r7, #6]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d10a      	bne.n	8000260 <LEDS_CONTROL+0x30>
		*GPIOD_ODR |= (0b1 << (12 + led));
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	79fa      	ldrb	r2, [r7, #7]
 8000250:	320c      	adds	r2, #12
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f202 	lsl.w	r2, r1, r2
 8000258:	431a      	orrs	r2, r3
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	601a      	str	r2, [r3, #0]
	else
		*GPIOD_ODR &= ~(0b1 << (12 + led));
}
 800025e:	e00a      	b.n	8000276 <LEDS_CONTROL+0x46>
		*GPIOD_ODR &= ~(0b1 << (12 + led));
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	79fa      	ldrb	r2, [r7, #7]
 8000266:	320c      	adds	r2, #12
 8000268:	2101      	movs	r1, #1
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	43d2      	mvns	r2, r2
 8000270:	401a      	ands	r2, r3
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	601a      	str	r2, [r3, #0]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40020c14 	.word	0x40020c14

08000288 <RCC_INIT>:
/*------------------- RCC */
void RCC_INIT(){
 8000288:	b480      	push	{r7}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
	/* -------- Choose Source Clock for PLL: HSE → PLLCFGR:PLLSRC[22] = 1. */
	uint32_t *RCC_PLLCFGR = (uint32_t *)(RCC_BASE_ADDR + 0x04);
 800028e:	4b3b      	ldr	r3, [pc, #236]	; (800037c <RCC_INIT+0xf4>)
 8000290:	60fb      	str	r3, [r7, #12]
	*RCC_PLLCFGR |= (0b1 << 22);
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	601a      	str	r2, [r3, #0]
		// PLLM & PLLN & PLLP
	*RCC_PLLCFGR &= ~(0b11 << 16);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	601a      	str	r2, [r3, #0]
	*RCC_PLLCFGR |= ((8 << 0) | (200 << 6) | (0b00 << 16));
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	6013      	str	r3, [r2, #0]

	/* -------- Set wait states (cycles) for FLASH */
	uint32_t *FLASH_ACR = (uint32_t *)(0x40023C00 + 0x00);
 80002ba:	4b31      	ldr	r3, [pc, #196]	; (8000380 <RCC_INIT+0xf8>)
 80002bc:	60bb      	str	r3, [r7, #8]
	*FLASH_ACR &= ~(0xF << 0);
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f023 020f 	bic.w	r2, r3, #15
 80002c6:	68bb      	ldr	r3, [r7, #8]
 80002c8:	601a      	str	r2, [r3, #0]
	*FLASH_ACR |= (3 << 0);
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0203 	orr.w	r2, r3, #3
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	601a      	str	r2, [r3, #0]

	/* -------- On HSE & PLL Clock */
	uint32_t *RCC_CR = (uint32_t *)(RCC_BASE_ADDR + 0x00);
 80002d6:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <RCC_INIT+0xfc>)
 80002d8:	607b      	str	r3, [r7, #4]
	*RCC_CR |= (0b1 << 16);
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
		// Wait until  HSERDY[17] = 1
	while (((*RCC_CR >> 17) & 1) == 0);
 80002e6:	bf00      	nop
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	0c5b      	lsrs	r3, r3, #17
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d0f8      	beq.n	80002e8 <RCC_INIT+0x60>
		// ON & wait PLL clock
	*RCC_CR |= (0b1 << 24);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	601a      	str	r2, [r3, #0]
	while (((*RCC_CR >> 25) & 1) == 0);
 8000302:	bf00      	nop
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	0e5b      	lsrs	r3, r3, #25
 800030a:	f003 0301 	and.w	r3, r3, #1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f8      	beq.n	8000304 <RCC_INIT+0x7c>

	/* -------- Set value of prescale */
		// Set AHB prescaler
	uint32_t *RCC_CFGR =(uint32_t *)(RCC_BASE_ADDR + 0x08);
 8000312:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <RCC_INIT+0x100>)
 8000314:	603b      	str	r3, [r7, #0]
	*RCC_CFGR &= ~(0xF << 4); // → as /1
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	601a      	str	r2, [r3, #0]
	 	// Set APB1 prescaler (/2)
	*RCC_CFGR &= ~(0b111 << 10);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |= (0b100 << 10);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	601a      	str	r2, [r3, #0]
		// Set APB2 prescaler (/1)
	*RCC_CFGR &= ~(0b111 << 13); // → as /1
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	601a      	str	r2, [r3, #0]


	/* -------- ON Switch bit to PLL → CFGR : SW [0:1] = 10*/
	*RCC_CFGR &= ~(0b11 << 0);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 0203 	bic.w	r2, r3, #3
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	601a      	str	r2, [r3, #0]
	*RCC_CFGR |= (0b10 << 0);
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f043 0202 	orr.w	r2, r3, #2
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	601a      	str	r2, [r3, #0]
	while (((*RCC_CFGR >> 2) & 0b11) != 0b10); // wait till switch done
 800035e:	bf00      	nop
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	089b      	lsrs	r3, r3, #2
 8000366:	f003 0303 	and.w	r3, r3, #3
 800036a:	2b02      	cmp	r3, #2
 800036c:	d1f8      	bne.n	8000360 <RCC_INIT+0xd8>

}
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	3714      	adds	r7, #20
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40023804 	.word	0x40023804
 8000380:	40023c00 	.word	0x40023c00
 8000384:	40023800 	.word	0x40023800
 8000388:	40023808 	.word	0x40023808

0800038c <RCC_ENABLE>:
void RCC_ENABLE(){
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
	uint32_t *RCC_AHB1ENR = (uint32_t *)(RCC_BASE_ADDR + 0x30);
 8000392:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <RCC_ENABLE+0x24>)
 8000394:	607b      	str	r3, [r7, #4]
	*RCC_AHB1ENR |= (0b1 << 3);
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f043 0208 	orr.w	r2, r3, #8
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	601a      	str	r2, [r3, #0]

}
 80003a2:	bf00      	nop
 80003a4:	370c      	adds	r7, #12
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop
 80003b0:	40023830 	.word	0x40023830

080003b4 <main>:
int main(){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_Init();
 80003b8:	f000 f8a6 	bl	8000508 <HAL_Init>
	RCC_INIT();
 80003bc:	f7ff ff64 	bl	8000288 <RCC_INIT>
	RCC_ENABLE();
 80003c0:	f7ff ffe4 	bl	800038c <RCC_ENABLE>
	LEDS_INIT();
 80003c4:	f7ff ff08 	bl	80001d8 <LEDS_INIT>
	while(1){
		LEDS_CONTROL(LED_BLUE, ON_LED);
 80003c8:	2101      	movs	r1, #1
 80003ca:	2003      	movs	r0, #3
 80003cc:	f7ff ff30 	bl	8000230 <LEDS_CONTROL>
		HAL_Delay(1000);
 80003d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d4:	f000 f90a 	bl	80005ec <HAL_Delay>
		LEDS_CONTROL(LED_BLUE, OFF_LED);
 80003d8:	2100      	movs	r1, #0
 80003da:	2003      	movs	r0, #3
 80003dc:	f7ff ff28 	bl	8000230 <LEDS_CONTROL>
		HAL_Delay(1000);
 80003e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e4:	f000 f902 	bl	80005ec <HAL_Delay>
		LEDS_CONTROL(LED_BLUE, ON_LED);
 80003e8:	e7ee      	b.n	80003c8 <main+0x14>
	...

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	2300      	movs	r3, #0
 80003f4:	607b      	str	r3, [r7, #4]
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <HAL_MspInit+0x4c>)
 80003f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003fa:	4a0f      	ldr	r2, [pc, #60]	; (8000438 <HAL_MspInit+0x4c>)
 80003fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000400:	6453      	str	r3, [r2, #68]	; 0x44
 8000402:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <HAL_MspInit+0x4c>)
 8000404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	2300      	movs	r3, #0
 8000410:	603b      	str	r3, [r7, #0]
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_MspInit+0x4c>)
 8000414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_MspInit+0x4c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	6413      	str	r3, [r2, #64]	; 0x40
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_MspInit+0x4c>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800

0800043c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000440:	e7fe      	b.n	8000440 <NMI_Handler+0x4>

08000442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000446:	e7fe      	b.n	8000446 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	e7fe      	b.n	800044c <MemManage_Handler+0x4>

0800044e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000452:	e7fe      	b.n	8000452 <BusFault_Handler+0x4>

08000454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <UsageFault_Handler+0x4>

0800045a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800045a:	b480      	push	{r7}
 800045c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800045e:	bf00      	nop
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr

08000476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr

08000484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000488:	f000 f890 	bl	80005ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}

08000490 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <SystemInit+0x20>)
 8000496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800049a:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <SystemInit+0x20>)
 800049c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00

080004b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004b8:	480d      	ldr	r0, [pc, #52]	; (80004f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004ba:	490e      	ldr	r1, [pc, #56]	; (80004f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c0:	e002      	b.n	80004c8 <LoopCopyDataInit>

080004c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004c6:	3304      	adds	r3, #4

080004c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004cc:	d3f9      	bcc.n	80004c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004d0:	4c0b      	ldr	r4, [pc, #44]	; (8000500 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d4:	e001      	b.n	80004da <LoopFillZerobss>

080004d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d8:	3204      	adds	r2, #4

080004da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004dc:	d3fb      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004de:	f7ff ffd7 	bl	8000490 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e2:	f000 f98d 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004e6:	f7ff ff65 	bl	80003b4 <main>
  bx  lr    
 80004ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004f8:	08000868 	.word	0x08000868
  ldr r2, =_sbss
 80004fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000500:	2000002c 	.word	0x2000002c

08000504 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC_IRQHandler>
	...

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800050c:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <HAL_Init+0x40>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <HAL_Init+0x40>)
 8000512:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000516:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <HAL_Init+0x40>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <HAL_Init+0x40>)
 800051e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000522:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_Init+0x40>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_Init+0x40>)
 800052a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000530:	2003      	movs	r0, #3
 8000532:	f000 f931 	bl	8000798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f808 	bl	800054c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800053c:	f7ff ff56 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023c00 	.word	0x40023c00

0800054c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x54>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <HAL_InitTick+0x58>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	fbb3 f3f1 	udiv	r3, r3, r1
 8000566:	fbb2 f3f3 	udiv	r3, r2, r3
 800056a:	4618      	mov	r0, r3
 800056c:	f000 f93b 	bl	80007e6 <HAL_SYSTICK_Config>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e00e      	b.n	8000598 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b0f      	cmp	r3, #15
 800057e:	d80a      	bhi.n	8000596 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000580:	2200      	movs	r2, #0
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	f04f 30ff 	mov.w	r0, #4294967295
 8000588:	f000 f911 	bl	80007ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <HAL_InitTick+0x5c>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000592:	2300      	movs	r3, #0
 8000594:	e000      	b.n	8000598 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000596:	2301      	movs	r3, #1
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000008 	.word	0x20000008
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x20>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_IncTick+0x24>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_IncTick+0x24>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000008 	.word	0x20000008
 80005d0:	20000028 	.word	0x20000028

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_GetTick+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff ffee 	bl	80005d4 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_Delay+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffde 	bl	80005d4 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000008 	.word	0x20000008

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
	...

08000754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3b01      	subs	r3, #1
 8000760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000764:	d301      	bcc.n	800076a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000766:	2301      	movs	r3, #1
 8000768:	e00f      	b.n	800078a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076a:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SysTick_Config+0x40>)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000772:	210f      	movs	r1, #15
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f7ff ff8e 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SysTick_Config+0x40>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <SysTick_Config+0x40>)
 8000784:	2207      	movs	r2, #7
 8000786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	e000e010 	.word	0xe000e010

08000798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f7ff ff47 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c0:	f7ff ff5c 	bl	800067c <__NVIC_GetPriorityGrouping>
 80007c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	68b9      	ldr	r1, [r7, #8]
 80007ca:	6978      	ldr	r0, [r7, #20]
 80007cc:	f7ff ff8e 	bl	80006ec <NVIC_EncodePriority>
 80007d0:	4602      	mov	r2, r0
 80007d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff5d 	bl	8000698 <__NVIC_SetPriority>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffb0 	bl	8000754 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	4d0d      	ldr	r5, [pc, #52]	; (8000838 <__libc_init_array+0x38>)
 8000804:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000806:	1b64      	subs	r4, r4, r5
 8000808:	10a4      	asrs	r4, r4, #2
 800080a:	2600      	movs	r6, #0
 800080c:	42a6      	cmp	r6, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	4d0b      	ldr	r5, [pc, #44]	; (8000840 <__libc_init_array+0x40>)
 8000812:	4c0c      	ldr	r4, [pc, #48]	; (8000844 <__libc_init_array+0x44>)
 8000814:	f000 f818 	bl	8000848 <_init>
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	10a4      	asrs	r4, r4, #2
 800081c:	2600      	movs	r6, #0
 800081e:	42a6      	cmp	r6, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f855 3b04 	ldr.w	r3, [r5], #4
 8000828:	4798      	blx	r3
 800082a:	3601      	adds	r6, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000832:	4798      	blx	r3
 8000834:	3601      	adds	r6, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	08000860 	.word	0x08000860
 800083c:	08000860 	.word	0x08000860
 8000840:	08000860 	.word	0x08000860
 8000844:	08000864 	.word	0x08000864

08000848 <_init>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr

08000854 <_fini>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	bf00      	nop
 8000858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085a:	bc08      	pop	{r3}
 800085c:	469e      	mov	lr, r3
 800085e:	4770      	bx	lr
